<?xml version="1.0" encoding="UTF-8"?>

<!--
  The root element 'schemas' allows the definition of several schemas. 
  -->
<!ELEMENT schemas (schema*)>

<!--
  Each schema must have an unique name and at least one slot specified.
  
  The 'type' attribute specifies to which object type this schema is to be
  applied. This information is used to verify is the specified slots exist
  in the object and if there is a way of rendering each slot.
  
  NOTE: 'type' currently is not used nor are the schemas verified as said
  TODO: implement the verification if slots exist in the defined schemas.
  
  The 'extends' attribute allows you to indicate that the schema being defined
  is an extension of the referred schema. This means that the schema being
  defined will include all the slots of the referred schema and can optionally
  override or remove some definitions.
  
  The 'refines' attribute is similar to the 'extends' except that the schema 
  being refined will be changed, that is, both schemas (the one being defined
  and the one being refined) will have the same slots and definitions. Be
  carefull when using this mechanism.
  
  The 'bundle' attribute is an abbreviation for the 'bundle' attribute of the
  inner slot elements. It specifies the bundle for every slot. You can override
  this in a per-slot basis.
  
  The 'constructor' attribute allows you to specify the constructor to be called
  when the schema is being used to create an object of the given type. The
  constuctor is specified by indicating the parameters and types of the constructor.
  You also indicate wich slot will be passed as argument and in what order.
  The specification of the constructor as the following format:
  
  	<slot name>[:<type>][,<slot name>[:<type>])]*
  	
  If the type is not specified then the type of the slot is used. A specification
  like:
  
  	s1:Integer,s2,s3:java.util.Date
  	
  indicates that the constructor with types (java.lang.Integer, <type of s2>, java.util.Date)
  will be called with the values for slot s1, slot s2, and slot s3.
-->
<!ELEMENT schema ((remove+,slot*,setter*)|(slot*,setter*))>

<!ATTLIST schema
	name ID #REQUIRED
	type CDATA #REQUIRED
	extends IDREF #IMPLIED
	refines IDREF #IMPLIED
	bundle NMTOKEN #IMPLIED
	constructor CDATA #IMPLIED
>

<!--
  The 'slot' element indicates that the slot with the specified name should be
  rendered when using this schema.
  
  Additionaly you can specify the layout used when rendering the slot value and
  even the schema that will be used.

  You can also specify the schema used to present the slot value.
  
  When rendering the slot label a convention is used to automatically find a valid
  entry in the render resources. Nevertheless you can specify, with the 'key' attribute,
  the exact key that will be used. The 'bundle' attribute has the normal meaning of 
  overriding the default resource bundle that is used.
  
  The acommodate cases were you need to receive input for the slot, a validator can
  be specified. The validator is the name of the class that will be instantiated to
  validate the input value. If you want to give properties to the validator you
  can use an inner validator element.
  
  If no value is associated with the slot, a default value can be given. The value is
  converted from the given string to the type of the slot.
  
  The 'converter' atrribute accepts a class name of a converter that will be used
  to convert the value for this slot. This can be used if you want to foce a special
  input presentation for the slot or convert to a specific value.
  
  The 'read-only' attribute allows you to prevent slots from being edited in an 
  input operation.
  
  The 'hidden' attributes prevents the slot from being used in the presentation but
  makes the slot available. So you can use this slot when specifying the constructor
  or a special setter. Offcourse you need to pass the value as an hidden slot in a
  JSP. Otherwise the slot will have the null value or any other value that was previously 
  set.
-->
<!ELEMENT slot (validator*,property*)>

<!ATTLIST slot
	name CDATA #REQUIRED
	layout NMTOKEN #IMPLIED
	schema IDREF #IMPLIED
	key NMTOKEN #IMPLIED
	bundle NMTOKEN #IMPLIED
	validator NMTOKEN #IMPLIED
	converter NMTOKEN #IMPLIED
	default CDATA #IMPLIED
	read-only NMTOKEN #IMPLIED
	hidden NMTOKEN #IMPLIED
	help NMTOKEN #IMPLIED
>

<!--
	The 'remove' element can only be used when the 'extends' attribute of the schema
	is set. This element allows you to indicate that a certain slot definition of
	the extended schema is to be ignored, that is, not included in this schema.
	
	The 'name' attribute specifies the name of the slot to be removed.
-->
<!ELEMENT remove EMPTY>

<!ATTLIST remove
	name CDATA #REQUIRED
>

<!--
	The 'validator' element can be used inside a slot element to configure the 
	validator used for the slot.
	
	The required attribute 'class' indicates the class of the validator.
	
	You can used inner property elements.
-->
<!ELEMENT validator (property*)>

<!ATTLIST validator
	class NMTOKEN #REQUIRED
>

<!--
  The 'property' element allows the configuration of the renderer used to present
  each slot value. Remember that the coosen renderer can be different every time
  so it is the renderer's responsability to undestand the properties passed.
  -->
<!ELEMENT property (#PCDATA)>

<!ATTLIST property
	value CDATA #IMPLIED
	name NMTOKEN #REQUIRED
>

<!--
  The setter element allows you to specify a special setter for a group of slots.
  If no setter is specified then each slot will be read with a standard getter and
  set with a standard setter. For example, if a slot is called s1 then it will be
  read with getS1 and set with setS1.
  
  The 'signature' attribute allows you to specify a signature similar to the one
  specified for the constructor. The format of the signature is
  
  	<setter name>(<slot name>[:<type>][,<slot name>[:<type>])]*)
  	
  The setter name is the complete method name. Do not ommit the "set" prefix. Each
  slot referred in the signature will not be setted with the standard setter for that
  slot. Instead they will be seted together using the specified method.
  -->
<!ELEMENT setter EMPTY>

<!ATTLIST setter
	signature CDATA #REQUIRED
>