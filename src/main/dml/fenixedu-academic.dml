/**
 * Copyright © 2002 Instituto Superior Técnico
 *
 * This file is part of FenixEdu Academic.
 *
 * FenixEdu Academic is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FenixEdu Academic is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with FenixEdu Academic.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.fenixedu.academic.domain;


/*
 * Enums first
 */
enum org.fenixedu.academic.domain.CompetenceCourseType                                                                 as CompetenceCourseType;
enum org.fenixedu.academic.domain.ContractType                                                                         as ContractType;
enum org.fenixedu.academic.domain.ExecutionCourseBoardPermittedGroupType                                               as ExecutionCourseBoardPermittedGroupType;
enum org.fenixedu.academic.domain.FormationType                                                                        as FormationType;
enum org.fenixedu.academic.domain.FrequencyType                                                                        as FrequencyType;
enum org.fenixedu.academic.domain.GradeScale                                                                           as GradeScale;
enum org.fenixedu.academic.domain.GrantOwnerType                                                                       as GrantOwnerType;
enum org.fenixedu.academic.domain.JobApplicationType                                                                   as JobApplicationType;
enum org.fenixedu.academic.domain.OccupationPeriodType                                                                 as OccupationPeriodType;
enum org.fenixedu.academic.domain.PhotoState                                                                           as PhotoState;
enum org.fenixedu.academic.domain.PhotoType                                                                            as PhotoType;
enum org.fenixedu.academic.domain.photograph.AspectRatio																  as AspectRatio;
enum org.fenixedu.academic.domain.photograph.PictureMode																  as PictureMode;
enum org.fenixedu.academic.domain.photograph.PictureSize																  as PictureSize;
enum org.fenixedu.academic.domain.ProfessionType                                                                       as ProfessionType;
enum org.fenixedu.academic.domain.ProfessionalSituationConditionType                                                   as ProfessionalSituationConditionType;
enum org.fenixedu.academic.domain.QualificationType                                                                    as QualificationType;
enum org.fenixedu.academic.domain.RequestState                                                                         as RequestState;
enum org.fenixedu.academic.domain.SalaryType                                                                           as SalaryType;
enum org.fenixedu.academic.domain.SchoolLevelType                                                                      as SchoolLevelType;
enum org.fenixedu.academic.domain.ShiftType                                                                            as ShiftType;
enum org.fenixedu.academic.domain.UnitBoardPermittedGroupType                                                          as UnitBoardPermittedGroupType;
enum org.fenixedu.academic.domain.accessControl.academicAdministration.AcademicOperationType				  			  as AcademicOperationType;
enum org.fenixedu.academic.domain.accessControl.academicAdministration.AcademicOperationType.Scope                     as AcademicOperationTypeScope;
enum org.fenixedu.academic.domain.administrativeOffice.AdministrativeOfficeType                                        as AdministrativeOfficeType;
enum org.fenixedu.academic.domain.contacts.PartyContactType                                                            as PartyContactType;
enum org.fenixedu.academic.domain.curricularRules.CurricularRuleType                                                   as CurricularRuleType;
enum org.fenixedu.academic.domain.curricularRules.CurricularRuleValidationType                                         as CurricularRuleValidationType;
enum org.fenixedu.academic.domain.curriculum.CurricularCourseType                                                      as CurricularCourseType;
enum org.fenixedu.academic.domain.curriculum.EnrollmentCondition                                                       as EnrollmentCondition;
enum org.fenixedu.academic.domain.curriculum.EnrollmentState                                                           as EnrollmentState;
enum org.fenixedu.academic.domain.degree.degreeCurricularPlan.DegreeCurricularPlanState                                as DegreeCurricularPlanState;
enum org.fenixedu.academic.domain.degreeStructure.BranchType                                                           as BranchType;
enum org.fenixedu.academic.domain.degreeStructure.CompetenceCourseLevel                                                as CompetenceCourseLevel;
enum org.fenixedu.academic.domain.degreeStructure.CurricularStage                                                      as CurricularStage;
enum org.fenixedu.academic.domain.degreeStructure.CycleType                                                            as CycleType;
enum org.fenixedu.academic.domain.degreeStructure.RegimeType                                                           as degreeStructure.RegimeType;
enum org.fenixedu.academic.domain.organizationalStructure.AcademicalInstitutionType                                    as AcademicalInstitutionType;
enum org.fenixedu.academic.domain.organizationalStructure.AccountabilityTypeEnum                                       as AccountabilityTypeEnum;
enum org.fenixedu.academic.domain.organizationalStructure.PartyTypeEnum                                                as PartyTypeEnum;
enum org.fenixedu.academic.domain.organizationalStructure.UnitClassification                                           as UnitClassification;
enum org.fenixedu.academic.domain.person.Gender                                                                        as Gender;
enum org.fenixedu.academic.domain.person.IDDocumentType                                                                as IDDocumentType;
enum org.fenixedu.academic.domain.person.MaritalStatus                                                                 as MaritalStatus;
enum org.fenixedu.academic.domain.serviceRequests.ServiceRequestCategory											   as ServiceRequestCategory;
enum org.fenixedu.academic.domain.serviceRequests.documentRequests.AcademicServiceRequestType                          as AcademicServiceRequestType;
enum org.fenixedu.academic.domain.serviceRequests.documentRequests.DocumentRequestType                                 as DocumentRequestType;
enum org.fenixedu.academic.domain.serviceRequests.AcademicServiceRequestSituationType                                  as AcademicServiceRequestSituationType;
enum org.fenixedu.academic.domain.serviceRequests.documentRequests.DocumentPurposeType                                 as DocumentPurposeType;
enum org.fenixedu.academic.domain.student.RegistrationRegimeType                                                       as RegistrationRegimeType;
enum org.fenixedu.academic.domain.util.LogicOperator                                                                   as LogicOperator;
enum org.fenixedu.academic.util.ContentType                                                                            as ContentType;
enum org.fenixedu.academic.util.Month                                                                                  as Month;
enum org.fenixedu.academic.util.RegimeType                                                                             as RegimeType;
enum org.fenixedu.academic.util.WeekDay                                                                                as WeekDay;
enum org.fenixedu.academic.domain.EntryPhase                                                                           as EntryPhase;
enum org.fenixedu.academic.domain.curriculum.EnrolmentEvaluationContext                                                as EnrolmentEvaluationContext;
enum org.fenixedu.academic.domain.OperationType																		  as OperationType;
enum org.fenixedu.academic.domain.candidacy.FirstTimeCandidacyStage													  as FirstTimeCandidacyStage;
enum org.fenixedu.academic.domain.contacts.PartyContactValidationState 									              as PartyContactValidationState;
enum org.fenixedu.academic.domain.SchoolPeriodDuration																  as SchoolPeriodDuration;
enum org.fenixedu.academic.domain.student.registrationStates.RegistrationStateType                                     as RegistrationStateType;


/*
 * Value types that need special externalization
 */

valueType java.math.BigDecimal as BigDecimal {
    externalizeWith {
        String toString();
    }
}

valueType java.util.UUID as UUID {
    externalizeWith {
        String toString();
    }

    internalizeWith fromString();
}

valueType org.fenixedu.academic.domain.Grade as Grade {
    externalizeWith {
        String exportAsString();
    }

    internalizeWith importFromString();
}

valueType org.fenixedu.academic.domain.degreeStructure.BibliographicReferences as BibliographicReferences {
    externalizeWith {
        String org.fenixedu.academic.domain.degreeStructure.Externalization.externalizeBibliographicReferences();
    }

    internalizeWith org.fenixedu.academic.domain.degreeStructure.Externalization.internalizeBibliographicReferences();
}

valueType org.fenixedu.academic.domain.time.calendarStructure.AcademicInterval as AcademicInterval {
    externalizeWith {
        String getRepresentationInStringFormat();
    }

    internalizeWith getAcademicIntervalFromString();
}

valueType org.fenixedu.academic.domain.time.calendarStructure.AcademicPeriod as AcademicPeriod {
    externalizeWith {
        String getRepresentationInStringFormat();
    }

    internalizeWith getAcademicPeriodFromString();
}

valueType org.fenixedu.academic.domain.CurricularYearList as CurricularYearList {
    externalizeWith {
        String toString();
    }

    internalizeWith internalize();
}

valueType org.fenixedu.academic.domain.util.EmailAddressList as EmailAddressList {
    externalizeWith {
        String toString();
    }
}


valueType org.fenixedu.academic.util.CurricularCourseExecutionScope as CurricularCourseExecutionScope {
    externalizeWith {
        Integer getType();
    }
}

valueType org.fenixedu.academic.util.DiaSemana as DiaSemana {
    externalizeWith {
        Integer getDiaSemana();
    }
}

valueType org.fenixedu.academic.util.EnrolmentAction as EnrolmentAction {
    externalizeWith {
        int getValue();
    }

    internalizeWith getEnum();
}

valueType org.fenixedu.academic.util.EnrolmentEvaluationState as EnrolmentEvaluationState {
    externalizeWith {
        Integer getState();
    }

    internalizeWith valueOf();
}

valueType org.fenixedu.academic.util.HourMinuteSecond as HourMinuteSecond {
    externalizeWith {
        LocalTime toLocalTime();
    }

    internalizeWith fromLocalTime();
}

valueType org.fenixedu.academic.util.MarkType as MarkType {
    externalizeWith {
        Integer getType();
    }
}

valueType org.fenixedu.academic.util.PeriodState as PeriodState {
    externalizeWith {
        String getStateCode();
    }

    internalizeWith valueOf();
}

valueType org.fenixedu.academic.util.Season as Season {
    externalizeWith {
        Integer getseason();
    }
}

valueType org.joda.time.Interval as Interval {
    externalizeWith {
        String org.fenixedu.academic.util.date.SerializationTool.intervalSerialize();
    }

    internalizeWith org.fenixedu.academic.util.date.SerializationTool.intervalDeserialize();
}

valueType org.joda.time.Duration as Duration {
    externalizeWith {
        Long getMillis();
    }
}

valueType org.joda.time.Period as Period {
    externalizeWith {
        bytearray pt.ist.fenixframework.core.Externalization.externalizeSerializable();
    }

    internalizeWith pt.ist.fenixframework.core.Externalization.internalizeSerializable();
}

valueType org.joda.time.YearMonthDay as YearMonthDay {
    externalizeWith {
        String org.fenixedu.academic.util.date.SerializationTool.yearMonthDaySerialize();
    }

    internalizeWith org.fenixedu.academic.util.date.SerializationTool.yearMonthDayDeserialize();
}

valueType org.fenixedu.academic.domain.accessControl.rules.AccessOperation as AccessOperation {
    externalizeWith {
        String exportAsString();
    }
    internalizeWith importFromString();
}


valueType org.fenixedu.academic.domain.degreeStructure.CycleTypes as CycleTypes {
    externalizeWith {
        JsonElement toJson();
    }
}


/*
*
* Class definitions
*
*/

    class Alumni  {
    }

    class Attends  {
    }

    class BibliographicReference  {
        String authors;
        Boolean optional;
        String reference;
        Integer referenceOrder;
        String title;
        String year;
        String url;
    }

    class CompetenceCourse  {
        String code;
        YearMonthDay creationDateYearMonthDay;
        CurricularStage curricularStage;
        String name;
        CompetenceCourseType type;
        GradeScale gradeScale;
    }

    class Coordinator  {
        Boolean responsible;
    }

    class Country  {
        String code (REQUIRED);
        String threeLetterCode (REQUIRED);
        String name;
        LocalizedString countryNationality (REQUIRED);
        Boolean defaultCountry (REQUIRED);
        LocalizedString localizedName (REQUIRED);
    }
    
    class CurricularSemester  {
        Integer semester;
    }

    class CurricularYear  {
        Integer year;
    }

	class AcademicProgram  {
	}

	public class degree.DegreeType {
		public String code (REQUIRED);
	    public LocalizedString name (REQUIRED);
	    public boolean empty;
	    public boolean bolonha;
	    public boolean degreeType;
	    public boolean masterDegree;
	    public boolean dea;
	    public boolean dfa;
	    public CycleTypes cycles (REQUIRED);
	    protected CycleTypes cyclesToEnrol (REQUIRED);
	    public Boolean active;
	}

    class Degree extends AcademicProgram {
        Double ectsCredits;
        GradeScale gradeScale (REQUIRED);
        String nameEn;
        String nome;
        String prevailingScientificArea;
        String sigla;
        String ministryCode;
        String idCardName;
        String siteUrl;
        String code;
    }
    
    class DegreeOfficialPublication  {
       LocalDate publication (REQUIRED);
       String dgesReference;
       String universityReference;
       String officialReference (REQUIRED);
    }

    class DegreeSpecializationArea  {
       LocalizedString name (REQUIRED);
    }

    class DegreeCurricularPlan  {
        String anotation;
        CurricularStage curricularStage;
        Integer degreeDuration;
        String description;
        String descriptionEn;
        YearMonthDay endDateYearMonthDay;
        GradeScale gradeScale;
        YearMonthDay initialDateYearMonthDay;
        MarkType markType;
        Integer minimalYearForOptionalCourses;
        String name;
        Double neededCredits;
        Integer numerusClausus;
        DegreeCurricularPlanState state;
        Boolean applyPreviousYearsEnrolmentRule;
        CurricularRuleValidationType curricularRuleValidationType;
    }
    
    class DegreeInfo  {
        Integer driftsFirst;
        Integer driftsInitial;
        Integer driftsSecond;
        Double markAverage;
        Double markMax;
        Double markMin;
        LocalizedString name;
        LocalizedString additionalInfo;
        LocalizedString description;
        LocalizedString gratuity;
        LocalizedString history;
        LocalizedString links;
        LocalizedString operationalRegime;
        LocalizedString schoolCalendar;

		LocalizedString learningLanguages;
		LocalizedString officialProgramDuration;
		LocalizedString studyRegime;
		LocalizedString prevailingScientificArea;
    }

    class DegreeInfoCandidacy  {
        LocalizedString accessRequisites;
        LocalizedString candidacyDocuments;
        LocalizedString candidacyPeriod;
        LocalizedString enrolmentPeriod;
        LocalizedString selectionResultDeadline;
        LocalizedString testIngression;
    }

    class DegreeInfoFuture  {
        LocalizedString classifications;
        LocalizedString designedFor;
        LocalizedString objectives;
        LocalizedString professionalExits;
        LocalizedString qualificationLevel;
        LocalizedString recognitions;
        
    	LocalizedString graduationNextLevelAccess;
		LocalizedString professionalStatute;
    }

    class Department  {
        String code;
        String name;
        String realName;
        String realNameEn;
        Boolean active;
    }

    class District  {
        String code (REQUIRED);
        String name (REQUIRED);
    }
    
    class DistrictSubdivision  {
        String code (REQUIRED);
        String name (REQUIRED);
    }

    class DomainOperationLog  {
        DateTime whenDateTime;
        String description;
    }
	
	class EmergencyContact {
		String contact;
	}

    class EvaluationConfiguration {
    }

	class EvaluationSeason {
		String code (REQUIRED);
        LocalizedString acronym (REQUIRED);
	    LocalizedString name (REQUIRED);
	    boolean normal;
	    boolean improvement;
	    boolean special;
	    boolean specialAuthorization;
	}
	
	class EnrolmentEvaluation  {
        String checkSum;
        EnrolmentEvaluationState enrolmentEvaluationState;
        YearMonthDay examDateYearMonthDay;
        Grade grade (REQUIRED);
        YearMonthDay gradeAvailableDateYearMonthDay;
        String gradeValue;
        String observation;
        DateTime whenDateTime;
        String bookReference;
        String page;
        EnrolmentEvaluationContext context;
        GradeScale gradeScale;
        Grade normalizedEctsGrade;
    }

	/* The field 'tempInstructions' is to be removed on next major version
	 * 		TODO: Replace String with LocalizedString
	 */
    class EnrolmentInstructions  {
    	String instructions;
        LocalizedString tempInstructions;
    }

    class Evaluation  {
        String publishmentMessage;
        GradeScale gradeScale;
    }

    class ExecutionCourse  {
        Boolean availableGradeSubmission;
        String comment;     
        String nome;        
        String sigla;
        EntryPhase entryPhase;
        Boolean projectTutorialCourse;
        BigDecimal unitCreditValue;      
        BigDecimal effortRate;
        String unitCreditValueNotes;
        String siteUrl;
        String email;
        boolean dynamicMailDistribution;
        boolean lessonPlanningAvailable;
    }
    
    class ExecutionCourseLog extends DomainOperationLog {
    }
    	class ContentManagementLog extends ExecutionCourseLog {
    	}
    	class ProfessorshipManagementLog extends ExecutionCourseLog {
    	}  
    	class CurricularManagementLog extends ExecutionCourseLog {
    	}
    	class GroupsAndShiftsManagementLog extends ExecutionCourseLog {
    	}
    	class EvaluationManagementLog extends ExecutionCourseLog {
    	}

    class DegreeLog extends DomainOperationLog { }
    
    	class CoordinationTeamLog extends DegreeLog { }
    	
    	class CandidaciesLog extends DegreeLog { }
    	
    class  PersonInformationLog extends DomainOperationLog {
    }
        
    class CourseLoad  {
        ShiftType type;
        BigDecimal totalQuantity;
        BigDecimal unitQuantity;    
    }

    class ExecutionDegree  {
        LocalizedString anotation;
        Boolean temporaryExamMap;                           
        AcademicInterval executionInterval;
    }

    class ExecutionInterval  {
        AcademicInterval academicInterval;                          
        PeriodState state;
        String name;        
        YearMonthDay beginDateYearMonthDay;
        YearMonthDay endDateYearMonthDay;
    }
        
    class ExecutionSemester extends ExecutionInterval {                                                                                                                 
    }

    class ExecutionYear extends ExecutionInterval {                                         
    }

    class ExternalCurricularCourse  {
        String code;
        String name;
    }

    class Photograph  {
        ContentType contentType;
        PhotoType photoType;
        PhotoState state;
        DateTime submission;
        DateTime stateChange;
    }

    class photograph.Picture {
    	Integer width;
    	Integer height;
    	ContentType pictureFileFormat;
    	bytearray pictureData;
    }
    
    class photograph.PictureOriginal extends photograph.Picture {
    }

        class candidacy.CandidacyDocumentFile extends .org.fenixedu.bennu.io.domain.GenericFile {
        }
        
        class candidacy.CandidacySummaryFile extends .org.fenixedu.bennu.io.domain.GenericFile {
        }

    class Holiday  {
        Partial date;
    }

    class Lesson  {
        HourMinuteSecond beginHourMinuteSecond;
        DiaSemana diaSemana;
        HourMinuteSecond endHourMinuteSecond;
        FrequencyType frequency;
    }

    class LessonInstance  {
        DateTime beginDateTime;
        DateTime endDateTime;
    }
    
    class LessonPlanning  {
        ShiftType lessonType;
        Integer orderOfPlanning;
        LocalizedString planning;
        LocalizedString title;
    }

    class Mark  {
        String mark;
        String publishedMark;
        // qubExtension
        DateTime enrolmentDate;
        DateTime gradeDate;
    }

    class OccupationPeriod  {
        Interval periodInterval;
    }
    
    /*
     * Bridge class
     */
    
    class OccupationPeriodReference  {
    	OccupationPeriodType periodType;
    	Integer semester;
    	CurricularYearList curricularYears;
    }

    class Professorship  {
        Boolean responsibleFor;
    }

    class Qualification  {
        String branch;
        YearMonthDay dateYearMonthDay;
        String degree;
        String degreeRecognition;
        YearMonthDay equivalenceDateYearMonthDay;
        String equivalenceSchool;
        DateTime lastModificationDateDateTime;
        String mark;
        String school;
        String specializationArea;
        String title;
        QualificationType type;
        String year;
        String designation;
        Partial attendedBegin;
        Partial attendedEnd;
        LocalDate whenCreated;
        boolean mainQualification;
    }

    class Formation extends Qualification {
        FormationType formationType;
        AcademicalInstitutionType institutionType;
        String beginYear;
        BigDecimal ectsCredits;
        Integer formationHours;
    }
    
    class SchoolClass  {
        Integer anoCurricular;
        String nome;
    }

    class Shift  {      
        Integer lotacao;
        String nome;
        String comment;
    }
    

    class ShiftEnrolment  {
        DateTime createdOn;
    }
    
    class ShiftProfessorship  {
        Double percentage;
    }

    class StudentCurricularPlan  {
        Double classification;
        Integer completedCourses;
        Integer enrolledCourses;
        Double givenCredits;
        String observations;
        YearMonthDay startDateYearMonthDay;
        DateTime whenDateTime;
        LocalDate endStageDate;
    }
    
    class Summary  {
        Boolean isExtraLesson;
        DateTime lastModifiedDateDateTime;
        Integer studentsNumber;
        YearMonthDay summaryDateYearMonthDay;
        HourMinuteSecond summaryHourHourMinuteSecond;
        LocalizedString summaryText;
        ShiftType summaryType;
        String teacherName;
        LocalizedString title;    
        Boolean taught;
        }

    class Teacher  {
    }

	class TeacherAuthorization {
	    protected DateTime creationDate;
	    protected Boolean contracted (REQUIRED);
	    protected DateTime revokeTime;
        protected Double lessonHours (REQUIRED);
        protected Double workPercentageInInstitution;
	}

	class TeacherCategory {
	    String code (REQUIRED);
	    LocalizedString name (REQUIRED);
	    Integer weight (REQUIRED);
	}

    class administrativeOffice.AdministrativeOffice  {
        LocalizedString name;
        AdministrativeOfficeType administrativeOfficeType;
    }

    class candidacy.Candidacy  {
        Integer number;
        YearMonthDay startDate;
    }

    class candidacy.CandidacyDocument  {
        String documentDescription;
    }

    class candidacy.CandidacySituation  {
        String remarks;
        DateTime situationDate;
    }

        class candidacy.AdmittedCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.CancelledCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.NotAdmittedCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.PreCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.RegisteredCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.StandByCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.StandByConfirmedDataCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.StandByFilledDataCandidacySituation extends candidacy.CandidacySituation {
        }

        class candidacy.SubstituteCandidacySituation extends candidacy.CandidacySituation {
            Integer candidacyOrder;
        }

        class candidacy.StudentCandidacy extends candidacy.Candidacy {
            String contigent;
            Double entryGrade;
            EntryPhase entryPhase;
            Boolean applyForResidence;
            String notesAboutResidenceAppliance;
            
            Boolean dislocatedFromPermanentResidence;
            Integer placingOption;
            GrantOwnerType grantOwnerType;
            Integer numberOfCandidaciesToHigherSchool;
            Integer numberOfFlunksOnHighSchool;
            AcademicalInstitutionType highSchoolType;
            MaritalStatus maritalStatus;
            ProfessionType professionType;
            ProfessionalSituationConditionType professionalCondition;
            SchoolLevelType motherSchoolLevel;
            ProfessionType motherProfessionType;
            ProfessionalSituationConditionType motherProfessionalCondition;
            SchoolLevelType fatherSchoolLevel;
            ProfessionType fatherProfessionType;
            ProfessionalSituationConditionType fatherProfessionalCondition;
            SchoolLevelType spouseSchoolLevel;
            ProfessionType spouseProfessionType;
            ProfessionalSituationConditionType spouseProfessionalCondition;
            
            Boolean firstTimeCandidacy;
        }

            class candidacy.DFACandidacy extends candidacy.StudentCandidacy {
            }

            class candidacy.DegreeCandidacy extends candidacy.StudentCandidacy {
            }

            class candidacy.IMDCandidacy extends candidacy.StudentCandidacy {
            }

            class candidacy.MDCandidacy extends candidacy.StudentCandidacy {
            }

            class candidacy.SDCandidacy extends candidacy.StudentCandidacy {
            }


	class candidacy.IngressionType{
		String code (REQUIRED);
		LocalizedString description (REQUIRED);
		
		boolean hasEntryPhase;
		boolean requiresUnfinishedSourceDegreeInformation;
		
		// These predicates correspond to some of the old enumeration values used in the business code
		// The code must assure that only one IngressionType instance has one of these fields as true
		protected boolean isExternalDegreeChange;
		protected boolean isInternalDegreeChange;
		protected boolean isTransfer;
		protected boolean isMiddleAndSuperiorCourses;
		protected boolean isOver23;
		protected boolean isInternal2ndCycleAccess;
		protected boolean isIsolatedCurricularUnits;
		protected boolean isInternal3rdCycleAccess;
		protected boolean isDirectAccessFrom1stCycle;
		protected boolean isHandicappedContingent;
		protected boolean isFirstCycleAttribution;
		protected boolean isReIngression;
	}
	
    class contacts.ContactRoot {
    }

    class contacts.PartyContact  {
        Boolean defaultContact;
        PartyContactType type;
        DateTime lastModifiedDate;
        Boolean visibleToPublic (REQUIRED);
        Boolean visibleToStudents (REQUIRED);
        Boolean visibleToStaff (REQUIRED);
        Boolean active;
    }

        class contacts.EmailAddress extends contacts.PartyContact {
            String value (REQUIRED);
        }

        class contacts.MobilePhone extends contacts.PartyContact {
            String number (REQUIRED);
        }

        class contacts.Phone extends contacts.PartyContact {
            String number (REQUIRED);
        }

        class contacts.PhysicalAddress extends contacts.PartyContact {
            String address;
            String area;
            String areaCode;
            String areaOfAreaCode;
            String districtOfResidence;
            String districtSubdivisionOfResidence;
            String parishOfResidence;
        }

        class contacts.WebAddress extends contacts.PartyContact {
            String url (REQUIRED);
        }
        
        class contacts.PartyContactValidation  {
        	PartyContactValidationState state (REQUIRED);
        	DateTime requestDate;
        	DateTime lastChangeDate;
        	String token;
			Integer tries;
			Boolean toBeDefault;
        }
        
        class  contacts.EmailValidation extends contacts.PartyContactValidation {
        }
        
        
        class contacts.PhoneValidation extends contacts.PartyContactValidation {
        
        }
        
        class contacts.PhysicalAddressValidation extends contacts.PartyContactValidation {
        	String description;
        }
        
        class contacts.PhysicalAddressValidationFile extends .org.fenixedu.bennu.io.domain.GenericFile {
        
        }

    class curricularPeriod.CurricularPeriod  {
        Integer childOrder;
        AcademicPeriod academicPeriod;
    }

    class curricularRules.CurricularRule  {
        CurricularRuleType curricularRuleType;
    }

        class curricularRules.CompositeRule extends curricularRules.CurricularRule {
            LogicOperator compositeRuleType;
        }

            class curricularRules.AndRule extends curricularRules.CompositeRule {
            }

            class curricularRules.OrRule extends curricularRules.CompositeRule {
            }

        class curricularRules.NotRule extends curricularRules.CurricularRule {
        }

        class curricularRules.Rule extends curricularRules.CurricularRule {
        }

            class curricularRules.AnyCurricularCourse extends curricularRules.Rule {
                Double credits;
                Integer curricularPeriodOrder;
                Integer maximumYear;
                Integer minimumYear;
                Double minimumCredits;
                Double maximumCredits;
            }
            
            class curricularRules.AnyCurricularCourseExceptions extends curricularRules.Rule {
            	Boolean optionalsConfiguration;
            }

            class curricularRules.CreditsLimit extends curricularRules.Rule {
                Double maximumCredits;
                Double minimumCredits;
            }

            class curricularRules.DegreeModulesSelectionLimit extends curricularRules.Rule {
                Integer maximumLimit;
                Integer minimumLimit;
            }

            class curricularRules.EnrolmentToBeApprovedByCoordinator extends curricularRules.Rule {
            }

            class curricularRules.Exclusiveness extends curricularRules.Rule {
            }
            
            class curricularRules.EvenOddRule extends curricularRules.Rule {
                Integer curricularPeriodOrder;
                AcademicPeriod academicPeriod;
                Boolean even;
            }

            class curricularRules.EnrolmentPeriodRestrictions extends curricularRules.Rule {
            }

            class curricularRules.MaximumNumberOfCreditsForEnrolmentPeriod extends curricularRules.Rule {
            }

            class curricularRules.MinimumNumberOfCreditsToEnrol extends curricularRules.Rule {
                Double minimumCredits;
            }

            class curricularRules.PrecedenceRule extends curricularRules.Rule {
                Integer curricularPeriodOrder;
                AcademicPeriod academicPeriod;
            }

                class curricularRules.RestrictionBetweenDegreeModules extends curricularRules.PrecedenceRule {
                    Double minimumCredits;
                }

                class curricularRules.RestrictionDoneDegreeModule extends curricularRules.PrecedenceRule {
                }

                class curricularRules.RestrictionEnroledDegreeModule extends curricularRules.PrecedenceRule {
                }
                
                class curricularRules.RestrictionNotEnroledDegreeModule extends curricularRules.PrecedenceRule {
                }


    class degreeStructure.CompetenceCourseInformation  {
        String acronym;
        Boolean basic;
        BibliographicReferences bibliographicReferences;
        CompetenceCourseLevel competenceCourseLevel;
        String evaluationMethod;
        String evaluationMethodEn;
        String name;
        String nameEn;
        String objectives;
        String objectivesEn;
        String program;
        String programEn;
        degreeStructure.RegimeType regime;
    }

    class degreeStructure.CompetenceCourseInformationChangeRequest  {
        String justification;
        Boolean approved;
        
        String name;
        String nameEn;
        
        degreeStructure.RegimeType regime;
        String objectives;
        String objectivesEn;
        String program;
        String programEn;
        String evaluationMethod;
        String evaluationMethodEn;
        CompetenceCourseLevel competenceCourseLevel;
        
        Double theoreticalHours;
        Double problemsHours;
        Double laboratorialHours; 
        Double seminaryHours;
        Double fieldWorkHours;
        Double trainingPeriodHours;
        Double tutorialOrientationHours;
        Double otherHours;
        Double autonomousWorkHours;
        Double ectsCredits;
        
        Double secondTheoreticalHours;
        Double secondProblemsHours;
        Double secondLaboratorialHours; 
        Double secondSeminaryHours;
        Double secondFieldWorkHours;
        Double secondTrainingPeriodHours;
        Double secondTutorialOrientationHours;
        Double secondOtherHours;
        Double secondAutonomousWorkHours;
        Double secondEctsCredits;
        
        BibliographicReferences bibliographicReferences;
    }

    class degreeStructure.CompetenceCourseLoad  {
        Double autonomousWorkHours;
        AcademicPeriod academicPeriod;
        Double ectsCredits;
        Double fieldWorkHours;
        Double laboratorialHours;
        Integer loadOrder;
        Double problemsHours;
        Double seminaryHours;
        Double theoreticalHours;
        Double trainingPeriodHours;
        Double tutorialOrientationHours;
        Double otherHours;
    }

    class degreeStructure.Context  {
        Integer childOrder;
    }

    class degreeStructure.DegreeModule  {
        String acronym;
        String code;
        String name;
        String nameEn;
    }

        class CurricularCourse extends degreeStructure.DegreeModule {
            Boolean basic;
            Double credits;
            CurricularCourseExecutionScope curricularCourseExecutionScope;
            CurricularStage curricularStage;
            Double ectsCredits;
            Boolean enrollmentAllowed;
            Integer enrollmentWeigth;
            GradeScale gradeScale;
            Double labHours;
            Boolean mandatory;
            Boolean mandatoryEnrollment;
            Integer maximumValueForAcumulatedEnrollments;
            Integer minimumValueForAcumulatedEnrollments;
            Double praticalHours;
            String prerequisites;
            String prerequisitesEn;
            degreeStructure.RegimeType regimeType;
            Double theoPratHours;
            Double theoreticalHours;
            CurricularCourseType type;
            Double weigth;
        }

            class degreeStructure.OptionalCurricularCourse extends CurricularCourse {
            }

        class degreeStructure.CourseGroup extends degreeStructure.DegreeModule {
        	boolean isOptional;
        }

        	class degreeStructure.BranchCourseGroup extends degreeStructure.CourseGroup {
        		BranchType branchType;
        	}

            class degreeStructure.CycleCourseGroup extends degreeStructure.CourseGroup {
                CycleType cycleType;
            }

            class degreeStructure.RootCourseGroup extends degreeStructure.CourseGroup {
            }

    public class degreeStructure.ProgramConclusion {
    	public String code;
        public LocalizedString name (REQUIRED);
        public LocalizedString description (REQUIRED);
        public LocalizedString graduationTitle (REQUIRED);
        public LocalizedString graduationLevel (REQUIRED);
        protected boolean averageEditable;
        protected boolean alumniProvider;
        protected boolean skipValidation;
        public RegistrationStateType targetState;
    }
	
    class EducationArea  {
        String code;
        String description;
    }

    class BusinessArea  {
        Integer level;
        String code;
        String description;
    }

    class Job  {
        String employerName;
        String city;
        LocalDate beginDate;
        LocalDate endDate;
        String position;
        JobApplicationType jobApplicationType;
        ContractType contractType;
        SalaryType salaryType;
        DateTime lastModifiedDate;
        Double salary;
    }
    
    class log.CurriculumLineLog  {
        EnrolmentAction action;
        DateTime dateDateTime;
        String who;
    }

        class log.EnrolmentLog extends log.CurriculumLineLog {
        }

            class log.OptionalEnrolmentLog extends log.EnrolmentLog {
            }

        class log.DismissalLog extends log.CurriculumLineLog {
            String sourceDescription;
            BigDecimal credits;
        }
            class log.OptionalDismissalLog extends log.DismissalLog {
            }
        
            class log.CreditsDismissalLog extends log.DismissalLog {
            }
	
	class log.EnrolmentEvaluationLog  {
		String action;
		String who;
		String gradeValue;
		String gradeScale;
		String evaluationSeason;
		String enrolmentEvaluationState;
		String executionSemester;
		String curricularCourse;
		String examDate;
		String enrolmentEvaluationResponsible;
		String book;
		String page;
		String actionDate;
	}
	
	class log.FirstTimeCandidacyLog  {
	}
	
	class log.FirstTimeCandidacyLogEntry  {
		FirstTimeCandidacyStage stage;
		DateTime entryDate;
	}
	
    class organizationalStructure.AccountabilityType  {     
        LocalizedString typeName;
        AccountabilityTypeEnum type;
    }
    
    class organizationalStructure.Accountability  {
        YearMonthDay beginDate;
        YearMonthDay endDate;
    }       
            
    class organizationalStructure.ConnectionRule  {
    	boolean managedByUser;
    }

    class organizationalStructure.PartyType  {
        PartyTypeEnum type;     
    }
    
    class organizationalStructure.PartySocialSecurityNumber  {
        String socialSecurityNumber;
    }
    
    class organizationalStructure.Party  {              
    }

        class Person extends organizationalStructure.Party {
            YearMonthDay dateOfBirthYearMonthDay;
            String districtOfBirth;
            String districtSubdivisionOfBirth;
            String documentIdNumber;
            YearMonthDay emissionDateOfDocumentIdYearMonthDay;
            String emissionLocationOfDocumentId;
            YearMonthDay expirationDateOfDocumentIdYearMonthDay;
            String fiscalCode;
            Gender gender;
            IDDocumentType idDocumentType;
            MaritalStatus maritalStatus;
            String nameOfFather;
            String nameOfMother;
            String parishOfBirth;
            String profession;
            String eidentifier;
            Integer numberOfValidationRequests;
            DateTime lastValidationRequestDate;
			Boolean disableSendEmails;
			boolean photoAvailable;
			DateTime dataProcessingTermsReadDate;
			String iban;
        }

		class PersonIdentificationDocumentExtraInfo  {
			DateTime registeredInSystemTimestamp;
			String value;
		}

			class IdentificationDocumentExtraDigit extends PersonIdentificationDocumentExtraInfo {
			}

			class IdentificationDocumentSeriesNumber extends PersonIdentificationDocumentExtraInfo {
			}

        class organizationalStructure.Unit extends organizationalStructure.Party {
            LocalizedString partyName;
            String acronym;
            String code;
            YearMonthDay beginDateYearMonthDay;
            Boolean canBeResponsibleOfSpaces;
            UnitClassification classification;
            YearMonthDay endDateYearMonthDay;
            String identificationCardLabel;
        }

            class organizationalStructure.AdministrativeOfficeUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.AggregateUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.CompetenceCourseGroupUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.CountryUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.DegreeUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.DepartmentUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.PedagogicalCouncilUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.PlanetUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.ManagementCouncilUnit extends organizationalStructure.Unit {
            }
            
            class organizationalStructure.ScientificAreaUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.ScientificCouncilUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.SectionUnit extends organizationalStructure.Unit {
            }

            class organizationalStructure.AcademicalInstitutionUnit extends organizationalStructure.Unit {
                Boolean official;                
                AcademicalInstitutionType institutionType;
            }

                class organizationalStructure.SchoolUnit extends organizationalStructure.AcademicalInstitutionUnit {
            }

                class organizationalStructure.UniversityUnit extends organizationalStructure.AcademicalInstitutionUnit {
            }

    class organizationalStructure.UnitCostCenterCode  {
        Integer costCenterCode;
    }

    class organizationalStructure.UnitName  {
        Boolean isExternalUnit;
        String name;
    }

    class organizationalStructure.UnitNamePart  {
        String namePart;
    }
    
    class organizationalStructure.UnitAcronym  {
        String acronym;
    }

    class person.IdDocument  {
        String value;
    }

    class person.IdDocumentTypeObject  {
        IDDocumentType value;
    }

        class space.SpaceOccupation extends .org.fenixedu.spaces.domain.occupation.Occupation {
        }

            class space.EventSpaceOccupation extends space.SpaceOccupation {                
            }

                class space.LessonSpaceOccupation extends space.EventSpaceOccupation {
                }

                class space.LessonInstanceSpaceOccupation extends space.EventSpaceOccupation {          
                }
                
    class serviceRequests.AcademicServiceRequestSituation  {
        AcademicServiceRequestSituationType academicServiceRequestSituationType;
        String justification;
        DateTime creationDate;
        DateTime situationDate;
    }
    
    class serviceRequests.AcademicServiceRequestYear  {
        Integer year;
        Integer latestServiceRequestNumber;
    }
    
    class serviceRequests.ServiceRequestType {
    	String code;
    	LocalizedString name;
    	AcademicServiceRequestType academicServiceRequestType;
    	DocumentRequestType documentRequestType;
    	boolean active;
    	boolean payable;
    	Boolean notifyUponConclusion;
    	Boolean printable;
    	Boolean requestedOnline;
    	Boolean printableOnline;
    	ServiceRequestCategory serviceRequestCategory;
    	LocalizedString numberOfUnitsLabel;
    }
    
    class serviceRequests.documentRequests.DocumentPurposeTypeInstance {
		String code (REQUIRED);
		LocalizedString name (REQUIRED);
		DocumentPurposeType documentPurposeType;
		Boolean active;
	}
    
    class serviceRequests.AcademicServiceRequest  {
        Boolean freeProcessed;
        Boolean urgentRequest;
        Integer serviceRequestNumber;
        DateTime requestDate;
        Locale language;
        Integer numberOfPages;
        Integer numberOfUnits;
        Boolean detailed;
	    CycleType requestedCycle;
    }
        
    class student.curriculum.ConclusionProcess  {
    }

        class student.curriculum.ProgramConclusionProcess extends student.curriculum.ConclusionProcess {
        }
    
    class student.curriculum.ConclusionProcessVersion  {
        DateTime creationDateTime (REQUIRED);
        LocalDate conclusionDate (REQUIRED);
        protected Grade rawGrade (REQUIRED);
        protected Grade finalGrade (REQUIRED);
        protected Grade descriptiveGrade;
        BigDecimal credits (REQUIRED);
        String curriculum (REQUIRED);
        String notes;
        protected boolean active (REQUIRED);
    }

    class student.curriculum.ExtraCurricularActivity  {
        Interval activityInterval (REQUIRED);
    }

    class student.curriculum.ExtraCurricularActivityType  {
        LocalizedString name (REQUIRED);
    }

    class student.PrecedentDegreeInformation  {
        String conclusionGrade;
        Integer conclusionYear;
        String degreeDesignation;
        SchoolLevelType schoolLevel;
        String otherSchoolLevel;
        String precedentDegreeDesignation;
        SchoolLevelType precedentSchoolLevel;
        String otherPrecedentSchoolLevel;
        Integer numberOfEnrolmentsInPreviousDegrees;
        SchoolPeriodDuration mobilityProgramDuration;
        DateTime lastModifiedDate;
        CycleType cycleType;
        LocalDate conclusionDate;
        Integer numberOfEnroledCurricularCourses;
        Integer numberOfApprovedCurricularCourses;        
        BigDecimal gradeSum;
        BigDecimal approvedEcts;
        BigDecimal enroledEcts;
        Boolean candidacyInternal;
    }

    class student.Registration  {
        Character approvationRatioClassification;
        Character arithmeticMeanClassification;
        Character entryGradeClassification;
        YearMonthDay homologationDate;
        Integer number;
        String agreementInformation;
        Boolean requestedChangeBranch;
        Boolean requestedChangeDegree;
        YearMonthDay startDate;
        YearMonthDay studiesStartDate;
        EntryPhase entryPhase;
    }

    class student.RegistrationDataByExecutionYear  {
		boolean reingression;
		LocalDate reingressionDate;
        protected LocalDate enrolmentDate;
    }

    class student.RegistrationNumber  {
        Integer number;
    }
    
    class student.RegistrationProtocol  {
        String code;
        boolean defaultStatus;
        Boolean enrolmentByStudentAllowed;
        Boolean payGratuity;
        Boolean allowsIDCard;
        Boolean onlyAllowedDegreeEnrolment;
        Boolean alien;
        Boolean exempted;
        Boolean mobility;
        Boolean military;
        Boolean allowDissertationCandidacyWithoutChecks;
        Boolean forOfficialMobilityReporting; // RAIDES
        Boolean attemptAlmaMatterFromPrecedent; // Spooky... but maintaining the logic

        LocalizedString description;
    }
    
    class student.RegistrationRegime  {
        DateTime whenCreated;
        RegistrationRegimeType regimeType;
    }
    
    class  student.RegistrationStateLog extends DomainOperationLog {
    }

    class student.Student  {
        Integer number;
    }
    
    class student.StudentNumber  {
        Integer number;
    }

	class student.StatuteType {
	    public String code;
		LocalizedString name (REQUIRED);
		boolean workingStudentStatute;
		boolean associativeLeaderStatute;
		boolean specialSeasonGrantedByRequest;
		boolean grantOwnerStatute;
		boolean seniorStatute;
		boolean handicappedStatute;
		boolean active;
		boolean explicitCreation;
		boolean visible;
		boolean specialSeasonGranted;
		boolean appliedOnRegistration;
	}

    class student.StudentStatute  {
        DateTime creationDate;
		LocalDate beginDate;
		LocalDate endDate;
		String comment;
    }
    
    class student.registrationStates.RegistrationState  {
        String remarks;
        DateTime stateDate;
    }

        class student.registrationStates.CanceledState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.ConcludedState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.ExternalAbandonState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.FlunkedState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.InternalAbandonState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.InterruptedState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.MobilityState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.RegisteredState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.SchoolPartConcludedState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.StudyPlanConcludedState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.TransitionalState extends student.registrationStates.RegistrationState {
        }
        
        class student.registrationStates.TransitedState extends student.registrationStates.RegistrationState {
        }

        class student.registrationStates.InactiveState extends student.registrationStates.RegistrationState {
        }

    class student.registrationStates.RegistrationStateLog  {
        DateTime whenCreated;
        DateTime stateDate;
        String stateType; 
        EnrolmentAction action;
        String who;
    }

    class studentCurriculum.Credits  {
        Double givenCredits;
        LocalDate officialDate;
    }

        class studentCurriculum.Equivalence extends studentCurriculum.Credits {
            Grade grade;
        }

            class studentCurriculum.Substitution extends studentCurriculum.Equivalence {
            }

                class studentCurriculum.TemporarySubstitution extends studentCurriculum.Substitution {
                }
                
                class studentCurriculum.InternalSubstitution extends studentCurriculum.Substitution {
                }

    class studentCurriculum.CurriculumModule  {
        DateTime creationDateDateTime;
    }

        class studentCurriculum.CurriculumGroup extends studentCurriculum.CurriculumModule {
        }

            class studentCurriculum.CycleCurriculumGroup extends studentCurriculum.CurriculumGroup {
            }

                class studentCurriculum.ExternalCurriculumGroup extends studentCurriculum.CycleCurriculumGroup {
                }

            class studentCurriculum.BranchCurriculumGroup extends studentCurriculum.CurriculumGroup {
            }

            class studentCurriculum.NoCourseGroupCurriculumGroup extends studentCurriculum.CurriculumGroup {
            }

                class studentCurriculum.ExtraCurriculumGroup extends studentCurriculum.NoCourseGroupCurriculumGroup {
                }

                class studentCurriculum.PropaedeuticsCurriculumGroup extends studentCurriculum.NoCourseGroupCurriculumGroup {
                }
                
                class studentCurriculum.StandaloneCurriculumGroup extends studentCurriculum.NoCourseGroupCurriculumGroup {
                }
                
                class studentCurriculum.InternalCreditsSourceCurriculumGroup extends studentCurriculum.NoCourseGroupCurriculumGroup {
                }

            class studentCurriculum.RootCurriculumGroup extends studentCurriculum.CurriculumGroup {
            }

        class studentCurriculum.CurriculumLine extends studentCurriculum.CurriculumModule {
            Boolean usedInSeparationCycle;
            String createdBy;
        }

            class Enrolment extends studentCurriculum.CurriculumLine {
                EnrollmentState enrollmentState;
                EnrollmentCondition enrolmentCondition;
                Boolean isExtraCurricular;
                Boolean isFirstTime;
                Double weigth;
                DateTime annulmentDate;
            }

                class OptionalEnrolment extends Enrolment {
                }
                
            class studentCurriculum.Dismissal extends studentCurriculum.CurriculumLine {
                Grade normalizedEctsGrade;
            }

                class studentCurriculum.OptionalDismissal extends studentCurriculum.Dismissal {
                    Double ectsCredits;
                }
                
                class studentCurriculum.CreditsDismissal extends studentCurriculum.Dismissal {
                }

    class studentCurriculum.EnrolmentWrapper  {
    }
    
        class studentCurriculum.InternalEnrolmentWrapper extends studentCurriculum.EnrolmentWrapper {
        }
        
        class studentCurriculum.ExternalEnrolmentWrapper extends studentCurriculum.EnrolmentWrapper {
    }

    class studentCurriculum.ExternalEnrolment  {
        String createdBy;
        DateTime creationDateDateTime;
        Double ectsCredits (REQUIRED);
        YearMonthDay evaluationDate;
        Grade grade (REQUIRED);
        degreeStructure.RegimeType regime;
        Grade normalizedEctsGrade;
    }

    class time.calendarStructure.AcademicCalendarEntry  {
        LocalizedString title;
        LocalizedString description;        
        DateTime begin;
        DateTime end;        
    }

        class time.calendarStructure.AcademicCalendarRootEntry extends time.calendarStructure.AcademicCalendarEntry {           
        }
        
        class time.calendarStructure.AcademicSemesterCE extends time.calendarStructure.AcademicCalendarEntry {
        }

        class time.calendarStructure.AcademicTrimesterCE extends time.calendarStructure.AcademicCalendarEntry {
        }

        class time.calendarStructure.AcademicYearCE extends time.calendarStructure.AcademicCalendarEntry {
        }

        class time.calendarStructure.EnrolmentsPeriodCE extends time.calendarStructure.AcademicCalendarEntry {
        }

        class time.calendarStructure.ExamsPeriodCE extends time.calendarStructure.AcademicCalendarEntry {
        }       
            class time.calendarStructure.ExamsPeriodInNormalSeasonCE extends time.calendarStructure.ExamsPeriodCE {         
            }
            
            class time.calendarStructure.ExamsPeriodInSpecialSeasonCE extends time.calendarStructure.ExamsPeriodCE {            
        }

        class time.calendarStructure.LessonsPeriodCE extends time.calendarStructure.AcademicCalendarEntry {
        }

        class time.calendarStructure.GradeSubmissionCE extends time.calendarStructure.AcademicCalendarEntry {
        }
            class time.calendarStructure.GradeSubmissionInNormalSeasonCE extends time.calendarStructure.GradeSubmissionCE {         
            }
            
            class time.calendarStructure.GradeSubmissionInSpecialSeasonCE extends time.calendarStructure.GradeSubmissionCE {            
            }
        
    class util.Email  {
        EmailAddressList bccAddresses;
        EmailAddressList ccAddresses;
        EmailAddressList replyTos;
        EmailAddressList toAddresses;
        EmailAddressList confirmedAddresses;
        EmailAddressList failedAddresses;
    }

    class util.email.Message  {
        String subject;
        String body;
        String htmlBody;
        DateTime created;
        DateTime sent;
        String bccs;
    }

    class util.email.Recipient  {
        String toName;
        Integer membersSize;
    }

    class util.email.ReplyTo  {
    }
    
    class util.email.ConcreteReplyTo extends util.email.ReplyTo {
        String replyToAddress;
    }

    class util.email.PersonReplyTo extends util.email.ReplyTo { }
    
    class util.email.ExecutionCourseReplyTo extends util.email.ReplyTo { }
    
    class util.email.CurrentUserReplyTo extends util.email.ReplyTo { }
    
    class util.email.Sender  {
        String fromName;
        String fromAddress;
    }

    class util.email.UnitBasedSender extends util.email.Sender {}
    
    class util.email.DepartmentMemberBasedSender extends util.email.UnitBasedSender {}

    class util.email.ExecutionCourseSender extends util.email.Sender { }

    class util.email.CoordinatorSender extends util.email.Sender {}
    
    class util.email.PersonSender extends util.email.Sender {}

    class util.email.SystemSender extends util.email.Sender {}

    class messaging.ConversationMessage {
        DateTime creationDate;
        LocalizedString body;
    }

    class messaging.ConversationThread {
        DateTime creationDate;
        LocalizedString title;
    }

    class messaging.Forum {
        DateTime creationDate;
        LocalizedString name;
        LocalizedString description;
    }

    class messaging.ForumSubscription  {
        Boolean favorite;
        Boolean receivePostsByEmail;
    }

        class messaging.ExecutionCourseForum extends messaging.Forum {
        }
        class messaging.DepartmentForum extends messaging.Forum {
        }

class QueueJob  {
               Boolean done;
               Integer failedCounter;
               DateTime requestDate;
               DateTime jobStartTime;
               DateTime jobEndTime;
}

class QueueJobWithFile extends QueueJob {
       String contentType;
}

class QueueJobResultFile extends .org.fenixedu.bennu.io.domain.GenericFile {}

public class accessControl.rules.AccessRuleSystem;

public class accessControl.rules.AccessRule {
    protected DateTime created (REQUIRED);
    protected DateTime revoked;
    protected AccessOperation operation (REQUIRED);
}

public class accessControl.academicAdministration.AcademicAccessRule extends accessControl.rules.AccessRule {
}

class candidacy.MeasurementTest  {
    EntryPhase entryPhase;
    
}

class candidacy.MeasurementTestShift  {
    String name;
    DateTime date;
}

class candidacy.MeasurementTestRoom  {
    String name;
    Integer capacity;
    Integer roomOrder;
}

class CoordinatorLog  {
	DateTime date;
	OperationType operation;
}

class ProfessorshipPermissions  {
	boolean personalization;
	boolean siteArchive;
	boolean announcements;
	boolean sections;
	boolean summaries;
	boolean students;
	boolean planning;
	boolean evaluationSpecific;
	boolean evaluationWorksheets;
	boolean evaluationProject;
	boolean evaluationTests;
	boolean evaluationExams;
	boolean evaluationFinal;
	boolean worksheets;
	boolean groups;
	boolean shift;
	boolean evaluationMethod;
	boolean bibliografy;
}

class UserPrivateKey {
    bytearray privateKey;
    DateTime privateKeyCreation;
    DateTime privateKeyValidity;
}

class raides.DegreeDesignation  {
	String code;
	String description;
}

class raides.DegreeClassification  {
	String code;
	String description1;
	String description2;
	String abbreviation;
	Integer classificationOrder;
}

class student.PersonalIngressionData  {
	Boolean dislocatedFromPermanentResidence;
	AcademicalInstitutionType highSchoolType;
    GrantOwnerType grantOwnerType;    
    MaritalStatus maritalStatus;
    ProfessionType professionType;
    ProfessionalSituationConditionType professionalCondition;
    SchoolLevelType motherSchoolLevel;
    ProfessionType motherProfessionType;
    ProfessionalSituationConditionType motherProfessionalCondition;
    SchoolLevelType fatherSchoolLevel;
    ProfessionType fatherProfessionType;
    ProfessionalSituationConditionType fatherProfessionalCondition;
    SchoolLevelType spouseSchoolLevel;
    ProfessionType spouseProfessionType;
    ProfessionalSituationConditionType spouseProfessionalCondition;
    DateTime lastModifiedDate;
}

class Installation {
	String instituitionURL;
	String instituitionEmailDomain;
	// Support e-mail for academic troubleshooting
	// Should be marked as required in future versions
	String academicEmailAddress;
}

class accessControl.PersistentRoleGroup extends .org.fenixedu.bennu.core.domain.groups.PersistentGroup {
    protected String targetGroup;
}

class accessControl.FenixPredicateGroup extends .org.fenixedu.bennu.core.domain.groups.PersistentGroup;

class accessControl.PersistentStudentGroup extends accessControl.FenixPredicateGroup {
    public CycleType cycle;
}

class accessControl.PersistentSpecialCriteriaOverExecutionCourseGroup extends .org.fenixedu.bennu.core.domain.groups.PersistentGroup;

class accessControl.PersistentStudentSharingDegreeOfExecutionCourseGroup extends accessControl.PersistentSpecialCriteriaOverExecutionCourseGroup;

class accessControl.PersistentStudentSharingDegreeOfCompetenceOfExecutionCourseGroup extends accessControl.PersistentSpecialCriteriaOverExecutionCourseGroup;

class accessControl.PersistentTeacherResponsibleOfExecutionCourseGroup extends accessControl.PersistentSpecialCriteriaOverExecutionCourseGroup;

class accessControl.PersistentTeacherGroup extends .org.fenixedu.bennu.core.domain.groups.PersistentGroup;

class accessControl.PersistentCoordinatorGroup extends accessControl.FenixPredicateGroup {
    Boolean responsible;
}

class accessControl.PersistentAcademicOperationGroup extends accessControl.FenixPredicateGroup {
    public AcademicOperationType operation;
    public AcademicOperationTypeScope scope;
}

class accessControl.PersistentResponsibleForExecutionCourseGroup extends accessControl.FenixPredicateGroup;

class accessControl.PersistentStudentsConcludedInExecutionYearGroup extends .org.fenixedu.bennu.core.domain.groups.PersistentGroup;

class accessControl.PersistentUnitGroup extends .org.fenixedu.bennu.core.domain.groups.PersistentGroup {
    public AccountabilityTypeEnum relationType;
    public Boolean includeSubUnits (REQUIRED);
}

class accessControl.PersistentAlumniGroup extends accessControl.FenixPredicateGroup;

class accessControl.PersistentProfessorshipsGroup extends accessControl.FenixPredicateGroup {
	public Boolean externalAuthorizations (REQUIRED);
	public AcademicPeriod onCurrentPeriod (REQUIRED);
}

public class log.StudentRegistrationTransferLog {
    protected DateTime when;
    protected String who;
}


class candidacy.FirstTimeDocumentsConfiguration {
	protected JsonElement configurationProperties (REQUIRED);	
}

/*
 * Relations definitions
 * 
 */

relation BennuInstallation {
	.org.fenixedu.bennu.core.domain.Bennu playsRole bennu {
		multiplicity 1..1;
	}
	Installation playsRole installation {
		multiplicity 0..1;
	}
}

relation PersonUserProfile {
    Person playsRole person {
        multiplicity 0..1;
    }
    .org.fenixedu.bennu.core.domain.UserProfile playsRole profile {
        multiplicity 1..1;
    }
}

relation UserProfileEmergencyContact {
	.org.fenixedu.bennu.core.domain.UserProfile playsRole profile {
		multiplicity 1;
    }
    EmergencyContact playsRole emergencyContact{
    	multiplicity 0..1;
    }
}

relation DomainOperationLogPerson {
	DomainOperationLog playsRole domainOperationLogs {
		multiplicity*;
	}
	Person playsRole person{
		multiplicity 0..1;
	}
}

relation DomainOperationLogRootDomainObject {
	DomainOperationLog playsRole domainOperationLogs {
		multiplicity*;
	}
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject{
		multiplicity 1..1;
	}
}

relation ExecutionCourseExecutionCourseLog {
	ExecutionCourse playsRole executionCourse{
		multiplicity 1..1;
	}
	ExecutionCourseLog playsRole executionCourseLogs {
		multiplicity*;
	}
}

relation ExecutionYearDegreeLog {
	ExecutionYear playsRole executionYear{
		multiplicity 1..1;
	}
	DegreeLog playsRole degreeLogs {
		multiplicity*;
	}
}

relation DegreeDegreeLog {
	Degree playsRole degree{
		multiplicity 1..1;
	}
	DegreeLog playsRole degreeLogs {
		multiplicity*;
	}
}

relation DegreeTypeDegree {
    public degree.DegreeType playsRole degreeType {
        multiplicity 1..1;
    }
    public Degree playsRole degree {
        multiplicity *;
    }
}

relation DegreeCalendar {
    public Degree playsRole degrees  { multiplicity *; }
    public time.calendarStructure.AcademicCalendarRootEntry playsRole calendar;
}

relation BennuDegreeType {
    public degree.DegreeType playsRole degreeType {
        multiplicity *;
    }
    protected .org.fenixedu.bennu.core.domain.Bennu playsRole bennu {
        multiplicity 1..1;
    }
}

relation PersonViewedPersonInformationLog {
	Person playsRole personViewed{
		multiplicity 1..1;
	}
	PersonInformationLog playsRole personInformationLogs {
		multiplicity *;
	}
}

relation RootDomainObjectMeasurementTest {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    candidacy.MeasurementTest playsRole measurementTests {
        multiplicity *;
    }
}

relation RootDomainObjectMeasurementTestShift {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    candidacy.MeasurementTestShift playsRole measurementTestShifts {
        multiplicity *;
    }
}

relation RootDomainObjectMeasurementTestRoom {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    candidacy.MeasurementTestRoom playsRole measurementTestRooms {
        multiplicity *;
    }
}

relation RegistrationMeasurementTestRoom {
    candidacy.MeasurementTestRoom playsRole measurementTestRoom;
    student.Registration playsRole registrations {
        multiplicity *;
    }
}

relation MeasurementTestShiftDegreeCurricularPlan {
	candidacy.MeasurementTestShift playsRole shift;
	DegreeCurricularPlan playsRole forDegreeCurricularPlan {
		multiplicity *;
	}
}

relation MeasurementTestShiftMeasurementTestRoom {
    candidacy.MeasurementTestShift playsRole shift;
    
    candidacy.MeasurementTestRoom playsRole rooms {
        multiplicity *;
    }
}

relation MeasurementTestShiftMeasurementTest {
    candidacy.MeasurementTest playsRole test;
    
    candidacy.MeasurementTestShift playsRole shifts {
        multiplicity *;
    }
}

relation MeasurementTestExecutionYear {
    ExecutionYear playsRole executionYear;
    
    candidacy.MeasurementTest playsRole measurementTests {
        multiplicity *;
    }
}

relation MeasurementTestCampus {
    .org.fenixedu.spaces.domain.Space playsRole campus;
    
    candidacy.MeasurementTest playsRole measurementTests {
        multiplicity *;
    }
}


relation RootDomainObjectDefaultCampus {
	.org.fenixedu.spaces.domain.Space playsRole defaultCampus;
	.org.fenixedu.bennu.core.domain.Bennu playsRole defaultCampusRootDomainObject;
}

relation AcademicCalendarEntryAcademicCalendarEntry {
    time.calendarStructure.AcademicCalendarEntry playsRole parentEntry;
    time.calendarStructure.AcademicCalendarEntry playsRole childEntries {
        multiplicity *;
    }
}

relation AcademicCalendarEntryBasedAcademicCalendarEntry {  
    time.calendarStructure.AcademicCalendarEntry playsRole templateEntry;
    time.calendarStructure.AcademicCalendarEntry playsRole basedEntries {
        multiplicity *;
    }
}

relation AcademicServiceRequestAcademicServiceRequestSituation {
    serviceRequests.AcademicServiceRequest playsRole academicServiceRequest {
    	multiplicity 1..1;
    }
    serviceRequests.AcademicServiceRequestSituation playsRole academicServiceRequestSituations {
        multiplicity *;
    }
}

relation AcademicServiceRequestAcademicServiceRequestYear {
    serviceRequests.AcademicServiceRequestYear playsRole academicServiceRequestYear {
    	multiplicity 1..1;
    }
    serviceRequests.AcademicServiceRequest playsRole academicServiceRequests {
        multiplicity *;
    }
}

relation AcademicServiceRequestYearRootDomainObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    serviceRequests.AcademicServiceRequestYear playsRole academicServiceRequestYears {
        multiplicity *;
    }
}

relation AdministrativeOfficeManagedAcademicPrograms {
    administrativeOffice.AdministrativeOffice playsRole administrativeOffice {
    	multiplicity 1..1;
    }
    AcademicProgram playsRole managedAcademicProgram {
    	multiplicity *;
    }
}

relation AdministrativeOfficeResponsible {
    protected administrativeOffice.AdministrativeOffice playsRole coordinatedAdministrativeOffice {
        multiplicity *;
    }
    public .org.fenixedu.bennu.core.domain.User playsRole coordinator {
        multiplicity 1..1;
    }
}

relation AdministrativeOfficeCampus {
    protected administrativeOffice.AdministrativeOffice playsRole administrativeOfficeOfCampus {
        multiplicity *;
    }
    public .org.fenixedu.spaces.domain.Space playsRole campus {
        multiplicity 1..1;
    }
}

relation AcademicServiceRequestAdministrativeOffice {
    administrativeOffice.AdministrativeOffice playsRole administrativeOffice {
    	multiplicity 1..1;
    }
    serviceRequests.AcademicServiceRequest playsRole academicServiceRequests {
        multiplicity *;
    }
}

relation AcademicServiceRequestSituationCreator {
    serviceRequests.AcademicServiceRequestSituation playsRole academicServiceRequestSituations {
        multiplicity *;
    }
    Person playsRole creator;
}

relation ProgramConclusionCourseGroup {
    public degreeStructure.ProgramConclusion playsRole programConclusion {
        multiplicity 0..1;
    }
    public degreeStructure.CourseGroup playsRole courseGroup {
        multiplicity 0..*;
    }
}

relation ProgramConclusionRoot {
    protected .org.fenixedu.bennu.core.domain.Bennu playsRole root {
        multiplicity 1..1;
    }
    public degreeStructure.ProgramConclusion playsRole programConclusion {
        multiplicity *;
    }
}

relation AccountabilityAccountabilityType {
    organizationalStructure.AccountabilityType playsRole accountabilityType;
    organizationalStructure.Accountability playsRole accountabilities {
        multiplicity *;
    }
}

relation AccountabilityChildParty {
    organizationalStructure.Party playsRole parentParty;
    organizationalStructure.Accountability playsRole childs {
        multiplicity *;
    }
}

relation AccountabilityParentParty {
    organizationalStructure.Party playsRole childParty;
    organizationalStructure.Accountability playsRole parents {
        multiplicity *;
    }
}

relation AdministrativeOfficeUnit {
    administrativeOffice.AdministrativeOffice playsRole administrativeOffice;
    organizationalStructure.Unit playsRole unit {
    	multiplicity 0..1;
    }
}

relation AffinityCycleCourseGroup {
    degreeStructure.CycleCourseGroup playsRole sourceAffinities {
        multiplicity *;
    }
    degreeStructure.CycleCourseGroup playsRole destinationAffinities {
        multiplicity *;
    }
}

relation AnyCurricularCourseDegree {
    curricularRules.AnyCurricularCourse playsRole participatingAnyCurricularCourseCurricularRules {
        multiplicity *;
    }
    Degree playsRole degree;
}

relation AnyCurricularCourseDegreeType {
    curricularRules.AnyCurricularCourse playsRole participatingAnyCurricularCourseCurricularRules {
        multiplicity *;
    }
    degree.DegreeType playsRole bolonhaDegreeType;
}

relation AnyCurricularCourseDepartmentUnit {
    curricularRules.AnyCurricularCourse playsRole participatingAnyCurricularCourseCurricularRules {
        multiplicity *;
    }
    organizationalStructure.DepartmentUnit playsRole departmentUnit;
}

relation AttendsEnrolment {
    Attends playsRole attends {
        multiplicity *;
    }
    Enrolment playsRole enrolment;
}

relation AttendsStudent {
    Attends playsRole associatedAttends {
        multiplicity *;
    }
    student.Registration playsRole aluno;
}

relation CandidacyCandidacyDocument {
    candidacy.Candidacy playsRole candidacy;
    candidacy.CandidacyDocument playsRole candidacyDocuments {
        multiplicity *;
    }
}

relation CandidacyDocumentCandidacyDocumentFile {
    candidacy.CandidacyDocument playsRole candidacyDocument;
    candidacy.CandidacyDocumentFile playsRole file;
}

relation CandidacyRootDomainObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    candidacy.Candidacy playsRole candidacies {
        multiplicity *;
    }
}

relation CandidacySituationCandidacy {
    candidacy.Candidacy playsRole candidacy;
    candidacy.CandidacySituation playsRole candidacySituations {
        multiplicity *;
    }
}

relation CandidacySituationPerson {
    Person playsRole person;
    candidacy.CandidacySituation playsRole candidacySituations {
        multiplicity *;
    }
}

relation CompetenceCourseDepartment {
    CompetenceCourse playsRole competenceCourses {
        multiplicity *;
    }
    Department playsRole departments {
        multiplicity *;
    }
}

relation CompetenceCourseInformationCompetenceCourse {
    degreeStructure.CompetenceCourseInformation playsRole competenceCourseInformations {
        multiplicity *;
    }
    CompetenceCourse playsRole competenceCourse;
}

relation CompetenceCourseInformationCompetenceCourseLoad {
    degreeStructure.CompetenceCourseInformation playsRole competenceCourseInformation;
    degreeStructure.CompetenceCourseLoad playsRole competenceCourseLoads {
        multiplicity *;
    }
}

relation CompetenceCourseInformationUnit {
    degreeStructure.CompetenceCourseInformation playsRole competenceCourseInformations {
        multiplicity *;
    }
    organizationalStructure.CompetenceCourseGroupUnit playsRole competenceCourseGroupUnit;
}

relation ConclusionProcessConclusionProcessVersion {
    student.curriculum.ConclusionProcess playsRole conclusionProcess;
    student.curriculum.ConclusionProcessVersion playsRole versions {
        multiplicity *; 
    }
}

relation ConclusionProcessLastVersion {
    student.curriculum.ConclusionProcess playsRole lastVersionConclusionProcess;
    student.curriculum.ConclusionProcessVersion playsRole lastVersion;
}

relation ConclusionProcessConclusionYear {
    student.curriculum.ConclusionProcess playsRole conclusionProcessesConcluded {
        multiplicity *;
    }
    ExecutionYear playsRole conclusionYear;
}

relation ConclusionProcessVersionConclusionYear {
    student.curriculum.ConclusionProcessVersion playsRole conclusionProcessVersionsConcluded {
        multiplicity *;
    }
    ExecutionYear playsRole conclusionYear;
}

relation ConclusionProcessVersionIngressionYear {
    student.curriculum.ConclusionProcessVersion playsRole conclusionProcessVersionsBegined {
        multiplicity *;
    }
    ExecutionYear playsRole ingressionYear;
}

relation ConnectionRuleAccountabilityType {
    organizationalStructure.AccountabilityType playsRole accountabilityType;
    organizationalStructure.ConnectionRule playsRole connectionRules {
        multiplicity *;
    }
}

relation CoordinatorTeacher {
    Coordinator playsRole coordinators {
        multiplicity *;
    }
    Person playsRole person;
}

relation CourseGroupContext {
    degreeStructure.CourseGroup playsRole parentCourseGroup;
    degreeStructure.Context playsRole childContexts {
        multiplicity *;
    }
}

relation CourseGroupCurricularRule {
    curricularRules.CurricularRule playsRole participatingContextCurricularRules {
        multiplicity *;
    }
    degreeStructure.CourseGroup playsRole contextCourseGroup;
}

relation CreditsDismissalEquivalence {
    studentCurriculum.Credits playsRole credits;
    studentCurriculum.Dismissal playsRole dismissals {
        multiplicity *;
    }
}

relation CreditsExecutionPeriod {
    ExecutionSemester playsRole executionPeriod {
        multiplicity 1..1;
    }
    studentCurriculum.Credits playsRole credits {
        multiplicity *;
    }
}

relation CreditsDismissalNoEnrolCurricularCourses {
    studentCurriculum.CreditsDismissal playsRole creditsDismissals {
        multiplicity *;
    }
    
    CurricularCourse playsRole noEnrolCurricularCourses {
        multiplicity *;
    }
}



relation CurricularCourseCompetenceCourse {
    CurricularCourse playsRole associatedCurricularCourses {
        multiplicity *;
    }
    CompetenceCourse playsRole competenceCourse;
}

relation CurricularCourseCurriculumLineLog {
    log.CurriculumLineLog playsRole curriculumLineLogs {
        multiplicity *;
    }
    degreeStructure.DegreeModule playsRole degreeModule;
}

relation OptionalCurricularCourseOptionalEnrolmentLog {
    log.OptionalEnrolmentLog playsRole optionalEnrolmentLogs {
        multiplicity *;
    }
    degreeStructure.OptionalCurricularCourse playsRole optionalCurricularCourse;
}

relation CurricularCourseExecutionCourse {
    CurricularCourse playsRole associatedCurricularCourses {
        multiplicity *;
    }
    ExecutionCourse playsRole associatedExecutionCourses {
        multiplicity *;
    }
}

relation CurricularPeriodContext {
    degreeStructure.Context playsRole contexts {
        multiplicity *;
    }
    curricularPeriod.CurricularPeriod playsRole curricularPeriod;
}

relation CurricularPeriodDegreeCurricularPlan {
    DegreeCurricularPlan playsRole degreeCurricularPlan;
    curricularPeriod.CurricularPeriod playsRole degreeStructure;
}

relation CurricularPeriodParentChilds {
    curricularPeriod.CurricularPeriod playsRole childs {
        multiplicity *;
    }
    curricularPeriod.CurricularPeriod playsRole parent;
}

relation CurricularRuleBeginExecutionPeriod {
    curricularRules.CurricularRule playsRole participatingBeginCurricularRules {
        multiplicity *;
    }
    ExecutionSemester playsRole begin;
}

relation CurricularRuleCompositeRule {
    curricularRules.CurricularRule playsRole curricularRules {
        multiplicity *;
    }
    curricularRules.CompositeRule playsRole parentCompositeRule;
}

relation CurricularRuleDegreeModule {
    degreeStructure.DegreeModule playsRole degreeModuleToApplyRule;
    curricularRules.CurricularRule playsRole curricularRules {
        multiplicity *;
    }
}

relation CurricularRuleEndExecutionPeriod {
    curricularRules.CurricularRule playsRole participatingEndCurricularRules {
        multiplicity *;
    }
    ExecutionSemester playsRole end;
}

relation CurricularRuleNotRule {
    curricularRules.CurricularRule playsRole wrappedRule;
    curricularRules.NotRule playsRole notRule;
}

relation CurricularSemesterCurricularYear {
    CurricularSemester playsRole curricularSemesters {
        multiplicity *;
    }
    CurricularYear playsRole curricularYear;
}

relation CurriculumGroupStudentCurricularPlan {
    studentCurriculum.RootCurriculumGroup playsRole root {
        multiplicity 1..1;
    }
    StudentCurricularPlan playsRole parentStudentCurricularPlan;
}

relation CurriculumModuleCurriculumGroup {
    studentCurriculum.CurriculumGroup playsRole curriculumGroup;
    studentCurriculum.CurriculumModule playsRole curriculumModules {
        multiplicity *;
    }
}

relation CurriculumGroupConclusionProcess {
    studentCurriculum.CurriculumGroup playsRole group;
    protected student.curriculum.ConclusionProcess playsRole conclusionProcess;
}

relation DegreeCurricularPlanCurricularCourse {
    CurricularCourse playsRole curricularCourses {
        multiplicity *;
    }
    DegreeCurricularPlan playsRole degreeCurricularPlan;
}

relation DegreeCurricularPlanDegreeModule {
    degreeStructure.RootCourseGroup playsRole root {
        multiplicity 1..1;
    }
    DegreeCurricularPlan playsRole parentDegreeCurricularPlan;
}

relation DegreeDegreeCurricularPlan {
    DegreeCurricularPlan playsRole degreeCurricularPlans {
        multiplicity *;
    }
    Degree playsRole degree;
}

relation DegreeDegreeInfo {
    Degree playsRole degree;
    DegreeInfo playsRole degreeInfos {
        multiplicity *;
    }
}

relation DegreeInfoDegreeInfoCandidacy {
    DegreeInfo playsRole degreeInfo;
    DegreeInfoCandidacy playsRole degreeInfoCandidacy;
}

relation DegreeInfoDegreeInfoFuture {
    DegreeInfo playsRole degreeInfo;
    DegreeInfoFuture playsRole degreeInfoFuture;
}

relation DegreeInfoExecutionYear {
    ExecutionYear playsRole executionYear;
    DegreeInfo playsRole degreeInfos {
        multiplicity *;
    }
}

relation DegreeModuleContext {
    degreeStructure.DegreeModule playsRole childDegreeModule;
    degreeStructure.Context playsRole parentContexts {
        multiplicity *;
    }
}

relation DegreeModuleCurriculumModule {
    degreeStructure.DegreeModule playsRole degreeModule;
    studentCurriculum.CurriculumModule playsRole curriculumModules {
        multiplicity *;
    }
}

relation DegreeModulePrecedenceRule {
    curricularRules.PrecedenceRule playsRole participatingPrecedenceCurricularRules {
        multiplicity *;
    }
    degreeStructure.DegreeModule playsRole precedenceDegreeModule;
}

relation DegreeUnit {
    Degree playsRole degree;
    organizationalStructure.DegreeUnit playsRole unit;
}

relation DepartmentDegree {
    Department playsRole departments {
        multiplicity *;
    }
    Degree playsRole degrees {
        multiplicity *;
    }
}

relation DepartmentUnit {
    Department playsRole department;
    organizationalStructure.DepartmentUnit playsRole departmentUnit;
}

relation DissertationEnrolmentConclusionProcess {
    protected Enrolment playsRole dissertationEnrolment;
    student.curriculum.ConclusionProcessVersion playsRole conclusionProcessVersions {
        multiplicity *; 
    }
}

relation EnrolmentEnrolmentEvaluation {
    Enrolment playsRole enrolment;
    EnrolmentEvaluation playsRole evaluations {
        multiplicity *;
    }
}

relation EvaluationConfigurationRoot {
    public EvaluationConfiguration playsRole evaluationConfiguration {
        multiplicity 0..1;
    }
    protected .org.fenixedu.bennu.core.domain.Bennu playsRole root {
        multiplicity 1..1;
    }
}

relation EvaluationSeasonRoot {
    protected EvaluationConfiguration playsRole evaluationConfiguration {
        multiplicity 1..1;
    }
    public EvaluationSeason playsRole evaluationSeason {
        multiplicity *;
    }
}

relation DefaultEvaluationSeason {
    protected EvaluationConfiguration playsRole evaluationConfigurationAsDefault {
        multiplicity 0..1;
    }
    public EvaluationSeason playsRole defaultEvaluationSeason {
        multiplicity 0..1;
    }
}

relation EvaluationSeasonPeriods {
    public EvaluationSeason playsRole evaluationSeason {
        multiplicity *;
    }
    protected OccupationPeriodReference playsRole period {
        multiplicity *;
    }
}

relation EnrolmentEvaluationSeason {
    public Enrolment playsRole enrolment {
        multiplicity *;
    }
    public EvaluationSeason playsRole evaluationSeason {
        multiplicity 1..1;
    }
}

relation EnrolmentEvaluationEvaluationSeason {
    public EnrolmentEvaluation playsRole evaluation {
        multiplicity *;
    }
    public EvaluationSeason playsRole evaluationSeason {
        multiplicity 1..1;
    }
}

relation EnrolmentEvaluationPerson {
    EnrolmentEvaluation playsRole enrolmentEvaluationsConfirmations {
        multiplicity *;
    }
    Person playsRole person;
}

relation EnrolmentEvaluationExecutionPeriod {
    EnrolmentEvaluation playsRole enrolmentEvaluations {
        multiplicity *;
    }
    ExecutionSemester playsRole executionPeriod;
}

relation EnrolmentEvaluationResponsiblePerson {
    EnrolmentEvaluation playsRole enrolmentEvaluations {
        multiplicity *;
    }
    Person playsRole personResponsibleForGrade;
}

relation EnrolmentExecutionPeriod {
    Enrolment playsRole enrolments {
        multiplicity *;
    }
    ExecutionSemester playsRole executionPeriod;
}

relation EnrolmentWrapperCredits {
    studentCurriculum.EnrolmentWrapper playsRole enrolments {
        multiplicity *;
    }
    studentCurriculum.Credits playsRole credits;
}

relation InternalEnrolmentWrapperEnrolment {
    Enrolment playsRole enrolment;
    studentCurriculum.InternalEnrolmentWrapper playsRole enrolmentWrappers {
        multiplicity *;
    }
}

relation ExternalEnrolmentWrapperEnrolment {
    studentCurriculum.ExternalEnrolment playsRole enrolment;
    studentCurriculum.ExternalEnrolmentWrapper playsRole enrolmentWrappers {
        multiplicity *;
    }
}

relation EvaluationExecutionCourse {
    ExecutionCourse playsRole associatedExecutionCourses {
        multiplicity *;
    }
    Evaluation playsRole associatedEvaluations {
        multiplicity *;
    }
}

relation ExclusivenessDegreeModule {
    curricularRules.Exclusiveness playsRole participatingExclusivenessCurricularRules {
        multiplicity *;
    }
    degreeStructure.DegreeModule playsRole exclusiveDegreeModule;
}

relation ExecutionCourseAttends {
    ExecutionCourse playsRole disciplinaExecucao;
    Attends playsRole attends {
        multiplicity *;
    }
}

relation ExecutionCourseBibliographicReference {
    BibliographicReference playsRole associatedBibliographicReferences {
        multiplicity *;
    }
    ExecutionCourse playsRole executionCourse;
}

relation ExecutionCourseProfessorship {
    ExecutionCourse playsRole executionCourse;
    Professorship playsRole professorships {
        multiplicity *;
    }
}

relation ExecutionCourseSummary {
    Summary playsRole associatedSummaries {
        multiplicity *;
    }
    ExecutionCourse playsRole executionCourse;
}

relation ExecutionCourseSender {
    ExecutionCourse playsRole course {
        multiplicity 1..1;
    }
    util.email.ExecutionCourseSender playsRole sender;
}

relation CoordinatorSender {
    Degree playsRole degree;
    util.email.CoordinatorSender playsRole sender;
}

relation PersonSender {
    Person playsRole person;
    util.email.PersonSender playsRole sender;
}

relation ExecutionDegreeCampus {
    ExecutionDegree playsRole executionDegrees {
        multiplicity *;
    }
    .org.fenixedu.spaces.domain.Space playsRole campus;
}

relation ExecutionDegreeCoordinator {
    ExecutionDegree playsRole executionDegree;
    Coordinator playsRole coordinatorsList {
        multiplicity *;
    }
}

relation ExecutionDegreeDegreeCurricularPlan {
    ExecutionDegree playsRole executionDegrees {
        multiplicity *;
    }
    DegreeCurricularPlan playsRole degreeCurricularPlan;
}

relation ExecutionDegreeExecutionYear {
    ExecutionDegree playsRole executionDegrees {
        multiplicity *;
    }
    ExecutionYear playsRole executionYear;
}

relation ExecutionDegreeExecutionSemesterExamMap {
    ExecutionDegree playsRole executionDegreesExamMaps {
        multiplicity *;
    }
    ExecutionSemester playsRole publishedExamMaps {
    	multiplicity *;
    }
}

relation OccupationPeriodReferenceExecutionDegree {
	ExecutionDegree playsRole executionDegree;
	OccupationPeriodReference playsRole occupationPeriodReferences {
		multiplicity *;
	}
}

relation OccupationPeriodReferenceExecutionInterval {
	ExecutionInterval playsRole executionInterval;
	OccupationPeriodReference playsRole occupationPeriodReferences { multiplicity *; }
}

relation OccupationPeriodReferencePeriod {
	OccupationPeriod playsRole occupationPeriod;
	OccupationPeriodReference playsRole executionDegrees {
		multiplicity *;
	}
}

relation ExecutionPeriodContextBegin {
    ExecutionSemester playsRole beginExecutionPeriod;
    degreeStructure.Context playsRole beginExecutionPeriodContexts {
        multiplicity *;
    }
}

relation ExecutionPeriodContextEnd {
    ExecutionSemester playsRole endExecutionPeriod;
    degreeStructure.Context playsRole endExecutionPeriodContexts {
        multiplicity *;
    }
}

relation ExecutionPeriodCurriculumLineLog {
    log.CurriculumLineLog playsRole curriculumLineLogs {
        multiplicity *;
    }
    ExecutionSemester playsRole executionPeriod;
}

relation ExecutionPeriodExecutionCourse {
    ExecutionCourse playsRole associatedExecutionCourses {
        multiplicity *;
    }
    ExecutionSemester playsRole executionPeriod;
}

relation ExecutionPeriodExecutionYear {
    ExecutionSemester playsRole executionPeriods {
        multiplicity *;
    }
    ExecutionYear playsRole executionYear;
}

relation ExecutionPeriodSchoolClass {
    ExecutionSemester playsRole executionPeriod;
    SchoolClass playsRole schoolClasses {
        multiplicity *;
    }
}

relation ExecutionYearAcademicServiceRequest {
    ExecutionYear playsRole executionYear;
    serviceRequests.AcademicServiceRequest playsRole academicServiceRequests {
        multiplicity *;
    }
}

relation ExternalCurricularCourseExternalEnrolment {
    studentCurriculum.ExternalEnrolment playsRole externalEnrolments {
        multiplicity *;
    }
    ExternalCurricularCourse playsRole externalCurricularCourse;
}

relation ExternalCurricularCourseUnit {
    organizationalStructure.Unit playsRole unit;
    ExternalCurricularCourse playsRole externalCurricularCourses {
        multiplicity *;
    }
}

relation ExternalEnrolmentExecutionPeriod {
    studentCurriculum.ExternalEnrolment playsRole externalEnrolments {
        multiplicity *;
    }
    ExecutionSemester playsRole executionPeriod;
}

relation PersonPhoto {
    Photograph playsRole personalPhoto;
    Person playsRole person;
}

relation PhotoRejector {
    Photograph playsRole rejectedPhoto {
        multiplicity *;
    }
    Person playsRole rejector;
}

relation PhotoApprover {
    Photograph playsRole approvedPhoto {
        multiplicity *;
    }
    Person playsRole approver;
}

relation PreviousPhotograph {
   Photograph playsRole previous;
   Photograph playsRole next;
}

relation PhotographOriginal {
	Photograph playsRole photograph;
	photograph.PictureOriginal playsRole original;
}

relation ExecutionCourseForumCourse {
    messaging.ExecutionCourseForum playsRole forum {
        multiplicity *;
    }
    ExecutionCourse playsRole executionCourse;
}

relation DepartmentForumDepartment {
    messaging.DepartmentForum playsRole forum;
    Department playsRole department;
}

relation ForumSubscriptionForum {
    messaging.ForumSubscription playsRole forumSubscriptions {
        multiplicity *;
    }
    messaging.Forum playsRole forum;
}

relation ForumSubscriptionPerson {
    messaging.ForumSubscription playsRole forumSubscriptions {
        multiplicity *;
    }
    Person playsRole person;
}

relation ForumConversationThreads {
    public messaging.Forum playsRole forum;
    public messaging.ConversationThread playsRole conversationThread {
        multiplicity *;
    }
}

relation ConversationThreadHasMessages {
    public messaging.ConversationThread playsRole conversationThread;
    public messaging.ConversationMessage playsRole message {
        multiplicity *;
    }
}

relation ConversationMessageCreator {
    public Person playsRole creator;
    public messaging.ConversationMessage playsRole conversationMessage {
        multiplicity *;
    }
}

relation ConversationThreadCreator {
    public Person playsRole creator;
    public messaging.ConversationThread playsRole conversationThread {
        multiplicity *;
    }
}

relation ForumCreator {
    public Person playsRole creator;
    public messaging.Forum playsRole forum {
        multiplicity *;
    }
}

relation IdDocumentPerson {
    Person playsRole person;
    person.IdDocument playsRole idDocuments {
        multiplicity *;
    }
}

relation IdDocumentTypeObjectIdDocument {
    person.IdDocumentTypeObject playsRole idDocumentType;
    person.IdDocument playsRole idDocuments {
        multiplicity *;
    }
}

relation LessonLessonSpaceOccupation {
    Lesson playsRole lesson;
    space.LessonSpaceOccupation playsRole lessonSpaceOccupation;
}

relation LessonPlanningExecutionCourse {
    ExecutionCourse playsRole executionCourse;
    LessonPlanning playsRole lessonPlannings {
        multiplicity *;
    }
}

relation LessonShift {
    Lesson playsRole associatedLessons {
        multiplicity *;
    }
    Shift playsRole shift;
}

relation MarkAttends {
    Mark playsRole associatedMarks {
        multiplicity *;
    }
    Attends playsRole attend;
}

relation MarkEvaluation {
    Mark playsRole marks {
        multiplicity *;
    }
    Evaluation playsRole evaluation;
}

relation OptionalCurricularCourseOptionalEnrolment {
    degreeStructure.OptionalCurricularCourse playsRole optionalCurricularCourse;
    OptionalEnrolment playsRole optionalEnrolments {
        multiplicity *;
    }
}

relation PartyPartySocialSecurityNumber {
    organizationalStructure.Party playsRole party;
    organizationalStructure.PartySocialSecurityNumber playsRole partySocialSecurityNumber;
}

relation PartyPartySocialSecurityCountry {
	Country playsRole fiscalCountry {
		multiplicity 0..1;
	}
	
	organizationalStructure.PartySocialSecurityNumber playsRole partySocialSecurityNumbers {
		multiplicity *;
	}
}

relation RootDomainObjectConclusionProcess {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.curriculum.ConclusionProcess playsRole conclusionProcesses {
        multiplicity *; 
    }
}

relation RootDomainObjectConclusionProcessVersion {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.curriculum.ConclusionProcessVersion playsRole conclusionProcessVersions {
        multiplicity *; 
    }
}

relation RootDomainObjectPartySocialSecurityNumber {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.PartySocialSecurityNumber playsRole partySocialSecurityNumbers {
        multiplicity *;
    }
}

relation PartyCountry {
    organizationalStructure.Party playsRole associatedParties {
        multiplicity *;
    }
    Country playsRole nationality;
}

relation PartyPartyContact {
    organizationalStructure.Party playsRole party;
    contacts.PartyContact playsRole partyContacts {
        multiplicity *;
    }
}

relation PrevContactPartyContact {
    contacts.PartyContact playsRole prevPartyContact;
    contacts.PartyContact playsRole currentPartyContact;
}

relation PartyPartyContactValidation {
    contacts.PartyContact playsRole partyContact;
    contacts.PartyContactValidation playsRole partyContactValidation;
}

relation PhysicalAddressValidationPhysicalAddressValidationFile {
	contacts.PhysicalAddressValidation playsRole pyhsicalAddressValidation;
	contacts.PhysicalAddressValidationFile playsRole file;
}

relation PartyPartyType {
    organizationalStructure.PartyType playsRole partyType;
    organizationalStructure.Party playsRole parties {
        multiplicity *;
    }
}

relation PartyTypeChildConnectionRule {
    organizationalStructure.PartyType playsRole allowedChildPartyType;
    organizationalStructure.ConnectionRule playsRole allowedParentConnectionRules {
        multiplicity *;
    }
}

relation PartyTypeParentConnectionRule {
    organizationalStructure.PartyType playsRole allowedParentPartyType;
    organizationalStructure.ConnectionRule playsRole allowedChildConnectionRules {
        multiplicity *;
    }
}

relation PeriodNextPeriod {
    OccupationPeriod playsRole previousPeriod;
    OccupationPeriod playsRole nextPeriod;
}

relation AccessRuleSystemRoot {
    protected .org.fenixedu.bennu.core.domain.Bennu playsRole root {
        multiplicity 1..1;
    }
    public accessControl.rules.AccessRuleSystem playsRole accessRuleSystem {
        multiplicity 0..1;
    }
}

relation AccessRules {
    protected accessControl.rules.AccessRuleSystem playsRole ruleSystem {
        multiplicity 0..1;
    }
    protected accessControl.rules.AccessRule playsRole accessRule {
        multiplicity *;
    }
}

relation DeletedAccessRules {
    protected accessControl.rules.AccessRuleSystem playsRole deletedFromRuleSystem {
        multiplicity 0..1;
    }
    protected accessControl.rules.AccessRule playsRole deletedAccessRule {
        multiplicity *;
    }
}

relation AccessRuleCreator {
    protected accessControl.rules.AccessRule playsRole accessRule {
        multiplicity *;
    }
    protected .org.fenixedu.bennu.core.domain.User playsRole creator {
        multiplicity 1..1;
    }
}

relation AccessRuleGroup {
    protected accessControl.rules.AccessRule playsRole accessRule {
        multiplicity *;
    }
    protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole persistentGroup {
        multiplicity 1..1;
    }
}

relation AcademicAccessRuleAcademicPrograms {
    protected accessControl.academicAdministration.AcademicAccessRule playsRole accessRule {
        multiplicity *;
    }
    protected AcademicProgram playsRole program {
        multiplicity *;
    }
}

relation AcademicAccessRuleOffices {
    protected accessControl.academicAdministration.AcademicAccessRule playsRole accessRule {
        multiplicity *;
    }
    protected administrativeOffice.AdministrativeOffice playsRole office {
        multiplicity *;
    }
}

relation PersonCandidacy {
    Person playsRole person;
    candidacy.Candidacy playsRole candidacies {
        multiplicity *;
    }
}

relation PersonCountryOfBirth {
    Person playsRole associatedBornedPersons {
        multiplicity *;
    }
    Country playsRole countryOfBirth;
}

relation PersonTeacher {
    Teacher playsRole teacher;
    Person playsRole person;
}

relation PhysicalAddressCountryOfResidence {
    contacts.PhysicalAddress playsRole associatedPhysicalAddresses {
        multiplicity *;
    }
    Country playsRole countryOfResidence;
}

relation PrecedentDegreeInformationCountry {
    student.PrecedentDegreeInformation playsRole precedentDegreeInformations {
        multiplicity *;
    }
    Country playsRole country;
}

relation PrecedentDegreeInformationCountryHighSchool {
    student.PrecedentDegreeInformation playsRole precedentDegreeInformationsHighSchool {
        multiplicity *;
    }
    Country playsRole countryHighSchool;
}

relation PrecedentDegreeInformationPrecedentCountry {
    student.PrecedentDegreeInformation playsRole originPrecedentDegreeInformations {
        multiplicity *;
    }
    Country playsRole precedentCountry;
}

relation PrecedentDegreeInformationInstitution {
    student.PrecedentDegreeInformation playsRole precedentDegreeInformations {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole institution;
}

relation PrecedentDegreeInformationSourceInstitution {
    student.PrecedentDegreeInformation playsRole destinationPrecedentDegreeInformations {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole sourceInstitution;
}

relation PrecedentDegreeInformationPrecedentInstitution {
    student.PrecedentDegreeInformation playsRole transitionPrecedentDegreeInformations {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole precedentInstitution;
}

relation PrecedentDegreeInformationStudent {
    student.PrecedentDegreeInformation playsRole precedentDegreeInformation;
    student.Registration playsRole student;
}

relation PrecedentDegreeInformationStudentCandidacy {
    student.PrecedentDegreeInformation playsRole precedentDegreeInformation;
    candidacy.StudentCandidacy playsRole studentCandidacy;
}

relation PrecedentDegreeInformationStudentCurricularPlan {
    StudentCurricularPlan playsRole studentCurricularPlan;
    student.PrecedentDegreeInformation playsRole precedentDegreeInformations {
        multiplicity *;
    }
}

relation ProfessorshipShiftProfessorship {
    Professorship playsRole professorship;
    ShiftProfessorship playsRole associatedShiftProfessorship {
        multiplicity *;
    }
}

relation ProfessorshipSummary {
    Summary playsRole associatedSummaries {
        multiplicity *;
    }
    Professorship playsRole professorship;
}

relation QualificationCountry {
    Qualification playsRole associatedQualifications {
        multiplicity *;
    }
    Country playsRole country;
}

relation QualificationPerson {
    Qualification playsRole associatedQualifications {
        multiplicity *;
    }
    Person playsRole person;
}

relation QualificationCreatorPerson {
    Qualification playsRole createdQualifications {
        multiplicity *;
    }
    Person playsRole creator;
}
relation QualificationModifiedByPerson {
    Qualification playsRole updatedQualifications {
        multiplicity *;
    }
    Person playsRole modifiedBy;
}

relation RectificationEnrolmentEvaluationRectifiedEnrolmentEvaluation {
    EnrolmentEvaluation playsRole rectification;
    EnrolmentEvaluation playsRole rectified;
}

relation RegistrationDataByExecutionYearExecutionYear {
    student.RegistrationDataByExecutionYear playsRole registrationDataByExecutionYear {
        multiplicity *;
    }
    protected ExecutionYear playsRole executionYear;
}

relation RegistrationRegimeExecutionYear {
    student.RegistrationRegime playsRole registrationRegimes {
        multiplicity *;
    }
    ExecutionYear playsRole executionYear;
}

relation RegistrationDataByExecutionYearRegistration {
    student.RegistrationDataByExecutionYear playsRole registrationDataByExecutionYear {
        multiplicity *;
    }
    protected student.Registration playsRole registration;
}

relation RegistrationRegimeRegistration {
    student.RegistrationRegime playsRole registrationRegimes {
        multiplicity *;
    }
    student.Registration playsRole registration;
}

relation RegistrationDataByExecutionYearRootDomainObject {
    student.RegistrationDataByExecutionYear playsRole registrationDataByExecutionYear {
        multiplicity *;
    }
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
}

relation RegistrationRegimeRootDomainObject {
    student.RegistrationRegime playsRole registrationRegimes {
        multiplicity *;
    }
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
}

relation RegistrationSourceDestiny {
    student.Registration playsRole destinyRegistrations {
        multiplicity *;
    }   
    student.Registration playsRole sourceRegistration;
}

relation RegistrationDegree {
    Degree playsRole degree;
    student.Registration playsRole registrations {
        multiplicity *;
    }
}

relation ResponsibleForConclusionProcessVersion {
    Person playsRole responsible;
    student.curriculum.ConclusionProcessVersion playsRole conclusionProcessVersions {
        multiplicity *; 
    }
}

relation RegistrationRegistrationNumber {
    student.Registration playsRole registration;
    student.RegistrationNumber playsRole registrationNumber;
}

relation RegistrationStateRegistration {
    student.Registration playsRole registration;
    student.registrationStates.RegistrationState playsRole registrationStates {
        multiplicity *;
    }
}

relation RegistrationStateResponsiblePerson {
    student.registrationStates.RegistrationState playsRole registrationStates {
        multiplicity *;
    }
    Person playsRole responsiblePerson;
}

relation RegistrationStateExecutionInterval {
    student.registrationStates.RegistrationState playsRole registrationStates { multiplicity *; }
    ExecutionInterval playsRole executionInterval;
}

relation RegistrationStateLogRegistration {
    student.registrationStates.RegistrationStateLog playsRole registrationStateLogs {
        multiplicity *;
    }
    student.Registration playsRole registration;
}

relation RegistrationStateLog {
    student.RegistrationStateLog playsRole registrationStateLog {
        multiplicity *;
    }
    student.Registration playsRole registration;
}

relation RegistrationStudent {
    student.Registration playsRole registrations {
        multiplicity *;
    }
    student.Student playsRole student;
}

relation RegistrationStudentCandidacy {
    student.Registration playsRole registration;
    candidacy.StudentCandidacy playsRole studentCandidacy;
}

relation RegistrationRegistrationProtocol {
	student.Registration playsRole registrations {
		multiplicity *;
	}
	student.RegistrationProtocol playsRole registrationProtocol;
}

relation RegistrationProtocolPerson {
	student.RegistrationProtocol playsRole registrationProtocols {
		multiplicity *;
	}
	Person playsRole supervisors {
		multiplicity *;
	}
}

relation RegistrationProtocolRootDomainObject {
	student.RegistrationProtocol playsRole registrationProtocols {
		multiplicity *;
	}
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
}

relation RoomSummary {
    Summary playsRole associatedSummaries {
        multiplicity *;
    }
    .org.fenixedu.spaces.domain.Space playsRole room;
}

relation RootDomainObjectAcademicCalendarRootEntry {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectForRootEntries;
    time.calendarStructure.AcademicCalendarRootEntry playsRole academicCalendars {
        multiplicity *;
    }
}

relation RootDomainObjectDefaultAcademicCalendar {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectForDefaultRootEntry;
    time.calendarStructure.AcademicCalendarRootEntry playsRole defaultAcademicCalendar;
}

relation RootDomainObjectAcademicCalendarEntry {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    time.calendarStructure.AcademicCalendarEntry playsRole academicCalendarEntries {
        multiplicity *;
    }
}

relation RootDomainObjectAcademicServiceRequest {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    serviceRequests.AcademicServiceRequest playsRole academicServiceRequests {
        multiplicity *;
    }
}

relation RootDomainObjectAcademicServiceRequestSituation {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    serviceRequests.AcademicServiceRequestSituation playsRole academicServiceRequestSituations {
        multiplicity *;
    }
}

relation RootDomainObjectAccountability {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.Accountability playsRole accountabilitys {
        multiplicity *;
    }
}

relation RootDomainObjectAccountabilityType {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.AccountabilityType playsRole accountabilityTypes {
        multiplicity *;
    }
}

relation RootDomainObjectAdministrativeOffice {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    administrativeOffice.AdministrativeOffice playsRole administrativeOffices {
        multiplicity *;
    }
}

relation RootDomainObjectAttends {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Attends playsRole attendss {
        multiplicity *;
    }
}

relation RootDomainObjectBibliographicReference {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    BibliographicReference playsRole bibliographicReferences {
        multiplicity *;
    }
}

relation RootDomainObjectCandidacyDocument {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    candidacy.CandidacyDocument playsRole candidacyDocument {
        multiplicity *;
    }
}

relation RootDomainObjectCandidacySituation {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    candidacy.CandidacySituation playsRole candidacySituations {
        multiplicity *;
    }
}

relation RootDomainObjectCompetenceCourse {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    CompetenceCourse playsRole competenceCourses {
        multiplicity *;
    }
}

relation RootDomainObjectCompetenceCourseInformation {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    degreeStructure.CompetenceCourseInformation playsRole competenceCourseInformations {
        multiplicity *;
    }
}

relation RootDomainObjectCompetenceCourseLoad {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    degreeStructure.CompetenceCourseLoad playsRole competenceCourseLoads {
        multiplicity *;
    }
}

relation RootDomainObjectConnectionRule {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.ConnectionRule playsRole connectionRules {
        multiplicity *;
    }
}

relation RootDomainObjectContext {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    degreeStructure.Context playsRole contexts {
        multiplicity *;
    }
}

relation RootDomainObjectCoordinator {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Coordinator playsRole coordinators {
        multiplicity *;
    }
}

relation RootDomainObjectCountry {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Country playsRole countrys {
        multiplicity *;
    }
}

relation RootDomainObjectCredits {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    studentCurriculum.Credits playsRole credits {
        multiplicity *;
    }
}

relation RootDomainObjectCurricularPeriod {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    curricularPeriod.CurricularPeriod playsRole curricularPeriods {
        multiplicity *;
    }
}

relation RootDomainObjectCurricularRule {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    curricularRules.CurricularRule playsRole curricularRules {
        multiplicity *;
    }
}

relation RootDomainObjectCurricularSemester {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    CurricularSemester playsRole curricularSemesters {
        multiplicity *;
    }
}

relation RootDomainObjectCurricularYear {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    CurricularYear playsRole curricularYears {
        multiplicity *;
    }
}

relation RootDomainObjectDegree {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Degree playsRole degrees {
        multiplicity *;
    }
}

relation RootDomainObjectDegreeCurricularPlan {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    DegreeCurricularPlan playsRole degreeCurricularPlans {
        multiplicity *;
    }
}

relation RootDomainObjectDegreeInfo {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    DegreeInfo playsRole degreeInfos {
        multiplicity *;
    }
}

relation RootDomainObjectDegreeInfoCandidacy {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    DegreeInfoCandidacy playsRole degreeInfoCandidacys {
        multiplicity *;
    }
}

relation RootDomainObjectDegreeInfoFuture {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    DegreeInfoFuture playsRole degreeInfoFutures {
        multiplicity *;
    }
}

relation RootDomainObjectDegreeModule {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    degreeStructure.DegreeModule playsRole degreeModules {
        multiplicity *;
    }
}

relation RootDomainObjectDepartment {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Department playsRole departments {
        multiplicity *;
    }
}

relation RootDomainObjectDistrict {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    District playsRole districts {
        multiplicity *;
    }
}

relation RootDomainObjectDistrictSubdivision {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    DistrictSubdivision playsRole districtSubdivisions {
        multiplicity *;
    }
}

relation DistrictDistrictSubdivision {
    District playsRole district;
    DistrictSubdivision playsRole districtSubdivisions {
        multiplicity *;
    }
}

relation RootDomainObjectEarthUnit {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectForEarthUnit;
    organizationalStructure.Unit playsRole earthUnit;
    }

relation RootDomainObjectEnrolmentEvaluation {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    EnrolmentEvaluation playsRole enrolmentEvaluations {
        multiplicity *;
    }
}

relation RootDomainObjectCurriculumLineLog {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    log.CurriculumLineLog playsRole curriculumLineLogs {
        multiplicity *;
    }
}

relation RootDomainObjectEnrolmentWrapper {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    studentCurriculum.EnrolmentWrapper playsRole enrolmentWrappers {
        multiplicity *;
    }
}

relation RootDomainObjectEvaluation {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Evaluation playsRole evaluations {
        multiplicity *;
    }
}

relation RootDomainObjectExecutionCourse {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    ExecutionCourse playsRole executionCourses {
        multiplicity *;
    }
}

relation RootDomainObjectExecutionDegree {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    ExecutionDegree playsRole executionDegrees {
        multiplicity *;
    }
}

relation RootDomainObjectExecutionPeriod {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectForExecutionPeriod;
    ExecutionSemester playsRole executionPeriods {
        multiplicity *;
    }
}

relation RootDomainObjectExecutionYear {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectForExecutionYear;
    ExecutionYear playsRole executionYears {
        multiplicity *;
    }
}

relation RootDomainObjectExecutionInterval {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    ExecutionInterval playsRole executionIntervals {
        multiplicity *;
    }
}

relation RootDomainObjectExternalCurricularCourse {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    ExternalCurricularCourse playsRole externalCurricularCourses {
        multiplicity *;
    }
}

relation RootDomainObjectExternalEnrolment {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    studentCurriculum.ExternalEnrolment playsRole externalEnrolments {
        multiplicity *;
    }
}

relation RootDomainObjectExternalInstitutionUnit {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectForExternalInstitutionUnit;
    organizationalStructure.Unit playsRole externalInstitutionUnit;
}

relation RootDomainObjectPhotographs {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Photograph playsRole photographs {
        multiplicity *;
    }
}

relation RootDomainObjectPendingPhotographs {
    .org.fenixedu.bennu.core.domain.Bennu playsRole pendingHolder;
    Photograph playsRole pendingPhotographs {
        multiplicity *;
    }
}

relation RootDomainObjectForumSubscription {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    messaging.ForumSubscription playsRole forumSubscriptions {
        multiplicity *;
    }
}

relation RootDomainObjectHoliday {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Holiday playsRole holidays {
        multiplicity *;
    }
}

relation RootDomainObjectIdDocument {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    person.IdDocument playsRole idDocuments {
        multiplicity *;
    }
}

relation RootDomainObjectIdDocumentTypeObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    person.IdDocumentTypeObject playsRole idDocumentTypes {
        multiplicity *;
    }
}

relation RootDomainObjectInstitutionUnit {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectForInstitutionUnit;
    organizationalStructure.Unit playsRole institutionUnit;
}

relation RootDomainObjectLesson {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Lesson playsRole lessons {
        multiplicity *;
    }
}

relation RootDomainObjectLessonPlanning {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    LessonPlanning playsRole lessonPlannings {
        multiplicity *;
    }
}

relation RootDomainObjectMark {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Mark playsRole marks {
        multiplicity *;
    }
}

relation RootDomainObjectOccupationPeriod {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    OccupationPeriod playsRole occupationPeriods {
        multiplicity *;
    }
}

relation RootDomainObjectOccupationPeriodReference {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    OccupationPeriodReference playsRole occupationPeriodReferences {
        multiplicity *;
    }
}

relation RootDomainObjectParty {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.Party playsRole partys {
        multiplicity *;
    }
}

relation ContactRootLink {
    .org.fenixedu.bennu.core.domain.Bennu playsRole root {
        multiplicity 1..1;
    }
    contacts.ContactRoot playsRole contactRoot {
        multiplicity 0..1;
    }
}

relation ContactsStudentVisibilityGroup {
    protected contacts.ContactRoot playsRole contactRootForStudentVisibility {
        multiplicity 0..1;
    }
    protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole studentVisibilityGroup {
        multiplicity 1..1;
    }
}

relation ContactsStaffVisibilityGroup {
    protected contacts.ContactRoot playsRole contactRootForStaffVisibility {
        multiplicity 0..1;
    }
    protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole staffVisibilityGroup {
        multiplicity 1..1;
    }
}

relation ContactsSystemVisibilityGroup {
    protected contacts.ContactRoot playsRole contactRootForManagementVisibility {
        multiplicity 0..1;
    }
    protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole managementVisibilityGroup {
        multiplicity 1..1;
    }
}

relation ContactsEmergencyContactVisibilityGroup {
    protected contacts.ContactRoot playsRole contactRootForEmergencyContactVisibility {
        multiplicity 0..1;
    }
    protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole emergencyContactVisibilityGroup {
        multiplicity 1..1;
    }
}

relation ContactRootContacts {
    contacts.ContactRoot playsRole contactRoot {
        multiplicity 1..1;
    }
    contacts.PartyContact playsRole partyContacts {
        multiplicity *;
    }
}

relation RootDomainObjectInvalidPartyContact {
    contacts.ContactRoot playsRole contactRoot {
        multiplicity 0..1;
    }
    contacts.PartyContactValidation playsRole invalidPartyContactValidations {
        multiplicity *;
    }
}

relation RootDomainObjectPartyType {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.PartyType playsRole partyTypes {
        multiplicity *;
    }
}

relation RootDomainObjectPrecedentDegreeInformation {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.PrecedentDegreeInformation playsRole precedentDegreeInformation {
        multiplicity *;
    }
}

relation RootDomainObjectProfessorship {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Professorship playsRole professorships {
        multiplicity *;
    }
}

relation RootDomainObjectQualification {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Qualification playsRole qualifications {
        multiplicity *;
    }
}

relation RootDomainObjectRegistration {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.Registration playsRole registrations {
        multiplicity *;
    }
}

relation RootDomainObjectRegistrationNumber {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.RegistrationNumber playsRole registrationNumbers {
        multiplicity *;
    }
}

relation RootDomainObjectRegistrationState {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.registrationStates.RegistrationState playsRole registrationStates {
        multiplicity *;
    }
}

relation RootDomainObjectRegistrationStateLog {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.registrationStates.RegistrationStateLog playsRole registrationStateLogs {
        multiplicity *;
    }
}

relation RootDomainObjectSchoolClass {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    SchoolClass playsRole schoolClasss {
        multiplicity *;
    }
}

relation RootDomainObjectShift {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Shift playsRole shifts {
        multiplicity *;
    }
}

relation RootDomainObjectShiftEnrolment {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    ShiftEnrolment playsRole shiftEnrolments {
        multiplicity *;
    }
}

relation RootDomainObjectShiftProfessorship {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    ShiftProfessorship playsRole shiftProfessorships {
        multiplicity *;
    }
}

relation RootDomainObjectStudent {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.Student playsRole students {
        multiplicity *;
    }
}

relation RootDomainObjectStudentNumber {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.StudentNumber playsRole studentNumbers {
        multiplicity *;
    }
}

relation RootDomainObjectStudentCurricularPlan {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    StudentCurricularPlan playsRole studentCurricularPlans {
        multiplicity *;
    }
}

relation StatuteTypeRootDomainObject {
	student.StatuteType playsRole statuteTypes {
		multiplicity *;
	}
	
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject {
		multiplicity 1..1;
	}
}

relation StatuteTypeStudentStatute {
	student.StudentStatute playsRole studentStatutes {
		multiplicity *;
	}
	
	student.StatuteType playsRole type {
		multiplicity 1..1;
	}
}

relation RegistrationStudentStatute {
	student.StudentStatute playsRole studentStatutes {
		multiplicity *;
	}
	
	student.Registration playsRole registration {
		multiplicity 0..1;
	}
}

relation RootDomainObjectStudentStatute {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.StudentStatute playsRole studentStatutes {
        multiplicity *;
    }
}

relation RootDomainObjectSummary {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Summary playsRole summarys {
        multiplicity *;
    }
}

relation RootDomainObjectTeacher {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Teacher playsRole teachers {
        multiplicity *;
    }
}

relation RootDomainObjectUnitName {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.UnitName playsRole unitName {
        multiplicity *;
    }
}

relation RootDomainObjectUnitNamePart {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.UnitNamePart playsRole unitNamePart {
        multiplicity *;
    }
}

relation RootDomainObjectUnitAcronym {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.UnitAcronym playsRole unitAcronyms {
        multiplicity *;
    }
}

relation SchoolClassExecutionDegree {
    SchoolClass playsRole schoolClasses {
        multiplicity *;
    }
    ExecutionDegree playsRole executionDegree;
}

relation ShiftEnrolmentRegistration {
    student.Registration playsRole registration;
    ShiftEnrolment playsRole shiftEnrolments {
        multiplicity *;
    }
}

relation ShiftEnrolmentShift {
    Shift playsRole shift;
    ShiftEnrolment playsRole shiftEnrolments {
        multiplicity *;
    }
}

relation ShiftSchoolClass {
    SchoolClass playsRole associatedClasses {
        multiplicity *;
    }
    Shift playsRole associatedShifts {
        multiplicity *;
    }
}

relation ShiftShiftProfessorship {
    Shift playsRole shift;
    ShiftProfessorship playsRole associatedShiftProfessorship {
        multiplicity *;
    }
}

relation ShiftStudent {
    Shift playsRole shifts {
        multiplicity *;
    }
    student.Registration playsRole students {
        multiplicity *;
    }
}

relation ShiftSummary {
    Summary playsRole associatedSummaries {
        multiplicity *;
    }
    Shift playsRole shift;
}

relation StudentCandidacyExecutionDegree {
    ExecutionDegree playsRole executionDegree;
    candidacy.StudentCandidacy playsRole studentCandidacies {
        multiplicity *;
    }
}

relation StudentCurricularPlanCredits {
    StudentCurricularPlan playsRole studentCurricularPlan;
    studentCurriculum.Credits playsRole credits {
        multiplicity *;
    }
}

relation StudentCurricularPlanDegreeCurricularPlan {
    StudentCurricularPlan playsRole studentCurricularPlans {
        multiplicity *;
    }
    DegreeCurricularPlan playsRole degreeCurricularPlan;
}

relation StudentCurricularPlanExecutionInterval {
    StudentCurricularPlan playsRole startedStudentCurricularPlans { multiplicity *; }
    protected ExecutionInterval playsRole startExecutionInterval;    
}

relation StudentCurricularPlanEnrolment {
    StudentCurricularPlan playsRole studentCurricularPlan;
    Enrolment playsRole enrolments {
        multiplicity *;
    }
}

relation StudentCurricularPlanStudent {
    StudentCurricularPlan playsRole studentCurricularPlans {
        multiplicity *;
    }
    student.Registration playsRole student;
}

relation StudentEnrolmentLog {
    log.CurriculumLineLog playsRole curriculumLineLogs {
        multiplicity *;
    }
    student.Registration playsRole student;
}

relation StudentExecutionYear {
    student.Registration playsRole students { multiplicity *; }
	ExecutionYear playsRole registrationYear { multiplicity 1..1; }
}

relation RegistrationExternalEnrolment {
    student.Registration playsRole registration;
    studentCurriculum.ExternalEnrolment playsRole externalEnrolments {
        multiplicity *;
    }
}

relation StudentPerson {
    student.Student playsRole student;
    Person playsRole person;
}

relation StudentStudentNumber {
    student.Student playsRole student;
    student.StudentNumber playsRole studentNumber;
}

relation StudentStatuteBeginPeriod {
    ExecutionSemester playsRole beginExecutionPeriod;
    student.StudentStatute playsRole beginningStudentStatutes {
        multiplicity *;
    }
}

relation StudentStatuteEndPeriod {
    ExecutionSemester playsRole endExecutionPeriod;
    student.StudentStatute playsRole endingStudentStatutes {
        multiplicity *;
    }
}

relation StudentStatuteStudent {
    student.Student playsRole student;
    student.StudentStatute playsRole studentStatutes {
        multiplicity *;
    }
}

relation PersonProfessorship {
    Professorship playsRole professorships {
        multiplicity *;
    }
    Person playsRole person;
}

relation TeacherSummary {
    Summary playsRole associatedSummaries {
        multiplicity *;
    }
    Teacher playsRole teacher;
}

relation InstitutionUnitDegreeDesignation {
	organizationalStructure.Unit playsRole institutionUnit {
		multiplicity *;
	}
	raides.DegreeDesignation playsRole degreeDesignation {
		multiplicity *;
	}
}

relation UnitCampus {
    .org.fenixedu.spaces.domain.Space playsRole campus;
    organizationalStructure.Unit playsRole units {
        multiplicity *;
    }
}

relation UnitNameUnitNamePart {
    organizationalStructure.UnitName playsRole unitName {
        multiplicity *;
    }
    organizationalStructure.UnitNamePart playsRole unitNamePart {
        multiplicity *;
    }
    }

relation UnitUnitAcronym {
    organizationalStructure.Unit playsRole units {
        multiplicity *;
    }
    organizationalStructure.UnitAcronym playsRole unitAcronym;
}

relation UnitUnitName {
    organizationalStructure.Unit playsRole unit;
    organizationalStructure.UnitName playsRole unitName;
}

relation UserPerson {
    Person playsRole person;
    .org.fenixedu.bennu.core.domain.User playsRole user;
}

relation UserPrivateKeyUser {
    UserPrivateKey playsRole privateKey;
    .org.fenixedu.bennu.core.domain.User playsRole;
}

relation OccupationPeriodLesson {
    OccupationPeriod playsRole period;
    Lesson playsRole lessons {
        multiplicity *;
    }
}

relation LessonInstanceRootDomainObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    LessonInstance playsRole lessonInstances {
        multiplicity *;
    }
}

relation LessonInstanceLesson {
    Lesson playsRole lesson;
    LessonInstance playsRole lessonInstances {
        multiplicity *;
    }
}

relation LessonInstanceLessonInstanceSpaceOccupations {
    LessonInstance playsRole lessonInstances {
        multiplicity *;
    }
    space.LessonInstanceSpaceOccupation playsRole lessonInstanceSpaceOccupation;
}

relation SummaryLessonInstance {
    Summary playsRole summary;
    LessonInstance playsRole lessonInstance;
}

relation CompetenceCourseInformationChangeRequester {
    degreeStructure.CompetenceCourseInformationChangeRequest playsRole competenceCourseInformationChangeRequests {
        multiplicity *;
    }
    Person playsRole requester;
}

relation CompetenceCourseInformationChangeApprover {
    degreeStructure.CompetenceCourseInformationChangeRequest playsRole approvedCompetenceCourseInformationChangeRequests {
        multiplicity *;
    }
    Person playsRole analizedBy;
}

relation CompetenceCourseInformationChangeRequestExecutionPeriod {
    degreeStructure.CompetenceCourseInformationChangeRequest playsRole competenceCourseInformationChangeRequests {
        multiplicity *;
    }
    ExecutionSemester playsRole executionPeriod;
}

relation CompetenceCourseInformationChangeRequestCompetenceCourse {
    degreeStructure.CompetenceCourseInformationChangeRequest playsRole competenceCourseInformationChangeRequests {
        multiplicity *;
    }
    CompetenceCourse playsRole competenceCourse;
}

relation CompetenceCourseInformationChangeRequestCompetenceCourseGroupUnit {
    degreeStructure.CompetenceCourseInformationChangeRequest playsRole competenceCourseInformationChangeRequests {
        multiplicity *;
    }
    organizationalStructure.CompetenceCourseGroupUnit playsRole competenceCourseGroupUnit;
}

relation CompetenceCourseInformationChangeRequestRootDomainObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    degreeStructure.CompetenceCourseInformationChangeRequest playsRole competenceCourseInformationChangeRequests {
        multiplicity *;
    }
}

relation CompetenceCourseInformationExecutionPeriod {
    ExecutionSemester playsRole executionPeriod;
    degreeStructure.CompetenceCourseInformation playsRole competenceCourseInformations {
        multiplicity *;
    }
}

relation CourseLoadRootDomainObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    CourseLoad playsRole courseLoads {
        multiplicity *;
    }
}

relation CourseLoadExecutionCourse {
    ExecutionCourse playsRole executionCourse;
    CourseLoad playsRole courseLoads {
        multiplicity *;
    }
}

relation CourseLoadShift {
    Shift playsRole shifts {
        multiplicity *;
    }
    CourseLoad playsRole courseLoads {
        multiplicity *;
    }
}

relation CourseLoadLessonInstance {
    CourseLoad playsRole courseLoad;
    LessonInstance playsRole lessonInstances {
        multiplicity *;
    }
}

relation AlumniStudent {
    Alumni playsRole alumni;
    student.Student playsRole student {
        multiplicity 1..1;
    }
}

relation RootDomainObjectAlumni {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Alumni playsRole alumnis {
        multiplicity *;
    }
}

relation RootDomainObjectJob {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    Job playsRole jobs {
        multiplicity *;
    }
}

relation JobPerson {
    Person playsRole person;
    Job playsRole jobs {
        multiplicity *;
    }
}

relation JobCreatorPerson {
    Person playsRole creator;
    Job playsRole createJobs {
        multiplicity *;
    }
}

relation JobCountry {
    Country playsRole country;
    Job playsRole jobs {
        multiplicity *;
    }
}

relation JobBusinessArea {
    BusinessArea playsRole businessArea;
    Job playsRole jobs {
        multiplicity *;
    }
}

relation JobParentBusinessArea {
    BusinessArea playsRole parentBusinessArea;
    Job playsRole parentJobs {
        multiplicity *;
    }
}

relation BusinessAreaBusinessArea {
    BusinessArea playsRole parentArea;
    BusinessArea playsRole childAreas {
        multiplicity *;
    }
}

relation RootDomainObjectBusinessArea {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    BusinessArea playsRole businessAreas {
        multiplicity *;
    }
}

relation EducationAreaEducationArea {
    EducationArea playsRole parentArea;
    EducationArea playsRole childAreas {
        multiplicity *;
    }
}

relation RootDomainObjectEducationArea {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    EducationArea playsRole educationAreas {
        multiplicity *;
    }
}

relation FormationEducationArea {
    Formation playsRole associatedFormations {
        multiplicity *;
    }
    EducationArea playsRole educationArea;
}

relation FormationUnit {
    Formation playsRole associatedFormations {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole institution;
}

relation BaseFormationUnit {
    Formation playsRole associatedBaseFormations {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole baseInstitution;
}

relation FormationCountryUnit {
    Formation playsRole associatedCountryUnitFormations {
        multiplicity *;
    }
    organizationalStructure.CountryUnit playsRole countryUnit;
}

relation StudentCandidacyCountryOfResidence {   
    candidacy.StudentCandidacy playsRole associatedResidentPersonsCandidacies {
        multiplicity *;
    }
    
    Country playsRole countryOfResidence;
}

relation StudentCandidacyGrantOwnerProvider {
    candidacy.StudentCandidacy playsRole studentCandidacies {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole grantOwnerProvider;
}

relation StudentCandidacyDistrictSubdivisionOfResidence {
    candidacy.StudentCandidacy playsRole studentCandidacies {
        multiplicity *;
    }
    
    DistrictSubdivision playsRole districtSubdivisionOfResidence;
}

relation StudentCandidacySchoolTimeDistrictSubdivisionOfResidence {
    candidacy.StudentCandidacy playsRole schoolTimeStudentCandidacies {
        multiplicity *;
    }
    
    DistrictSubdivision playsRole schoolTimeDistrictSubDivisionOfResidence;
}


relation RootDomainObjectUtilEmailMessage {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    util.email.Message playsRole utilEmailMessages {
        multiplicity *;
    }
}

relation RootDomainObjectUtilEmailRecipient {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    util.email.Recipient playsRole utilEmailRecipients {
        multiplicity *;
    }
}

relation RootDomainObjectUtilEmailSender {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    util.email.Sender playsRole utilEmailSenders {
        multiplicity *;
    }
}

relation RootDomainObjectSystemSender {
    .org.fenixedu.bennu.core.domain.Bennu playsRole systemRootDomainObject;
    util.email.SystemSender playsRole systemSender;
}

relation SystemSenderOptOutGroup {
    protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole optOutPersistentGroup;
    util.email.SystemSender playsRole systemSender;
}

relation UtilEmailSenderUtilEmailMessage {
    util.email.Sender playsRole sender;
    util.email.Message playsRole messages {
        multiplicity *;
    }
}

relation UtilEmailUtilEmailMessage {
    util.Email playsRole emails {
        multiplicity *;
    }
    util.email.Message playsRole message;
}

relation UtilEmailMessageUtilEmailRecipientTos {
    util.email.Message playsRole messagesTos {
        multiplicity *;
    }
    util.email.Recipient playsRole tos {
        multiplicity *;
    }
}

relation UtilEmailMessageUtilEmailRecipientCcs {
    util.email.Message playsRole messagesCcs {
        multiplicity *;
    }
    util.email.Recipient playsRole ccs {
        multiplicity *;
    }
}

relation UtilEmailMessageUtilEmailRecipient {
    util.email.Message playsRole messages {
        multiplicity *;
    }
    util.email.Recipient playsRole recipients {
        multiplicity *;
    }
}

relation RootDomainObjectUtilEmailReplyTo {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    util.email.ReplyTo playsRole replyTos {
        multiplicity *;
    }
}

relation UtilEmailSenderUtilEmailReplyTo {
    util.email.Sender playsRole sender;
    util.email.ReplyTo playsRole replyTos {
        multiplicity *;
    }
}

relation UtilEmailReplyToUtilEmailMessage {
    util.email.ReplyTo playsRole replyTos {
        multiplicity *;
    }
    util.email.Message playsRole messages {
        multiplicity *;
    }
}

relation PersonUtilEmailMessage {
    Person playsRole person;
    util.email.Message playsRole messages {
        multiplicity *;
    }
}

relation UtilEmailSenderUtilEmailRecipient {
    util.email.Sender playsRole senders {
        multiplicity *;
    }
    util.email.Recipient playsRole recipients {
        multiplicity *;
    }
}

relation PersonUtilEmailReplyTo {
    Person playsRole person;
    util.email.PersonReplyTo playsRole replyTo;
}

relation RootDomainObjectPendingUtilEmailMessage {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectFromPendingRelation;
    util.email.Message playsRole pendingUtilEmailMessages {
        multiplicity *;
    }
}

relation RootDomainObjectUnitCostCenterCode {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    organizationalStructure.UnitCostCenterCode playsRole unitCostCenterCodes {
        multiplicity *;
    }
}

relation UnitUnitCostCenterCode {
    organizationalStructure.Unit playsRole unit;
    organizationalStructure.UnitCostCenterCode playsRole unitCostCenterCode;
}

relation UnitUnitBasedSender {
    organizationalStructure.Unit playsRole unit;
    util.email.UnitBasedSender playsRole unitBasedSender {
        multiplicity *;
    }
}

relation QueueJobPerson {
       Person playsRole person;
       QueueJob playsRole job {
               multiplicity *;
       }
}

relation QueueJobUndoneRootDomainObject {
       QueueJob playsRole queueJobUndone {
               multiplicity *;
       }
       .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectQueueUndone;
}

relation QueueJobRootDomainObject {
       QueueJob playsRole queueJob {
               multiplicity *;
       }
       .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
}

relation QueueJobWithFileResult{
    QueueJobWithFile playsRole job;
    QueueJobResultFile playsRole file;
}

relation CurricularActivitiesRootDomainObject {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject {
        multiplicity 1..1;
    }
    student.curriculum.ExtraCurricularActivity playsRole extraCurricularActivity {
        multiplicity *;
    }
}

relation StudentExtraCurricularActivities {
    student.Student playsRole student;
    student.curriculum.ExtraCurricularActivity playsRole extraCurricularActivity {
        multiplicity *;
    }
}

relation ExtraCurricularActivityTypeRoot {
    student.curriculum.ExtraCurricularActivityType playsRole extraCurricularActivityType {
        multiplicity *;
    }
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject {
        multiplicity 1..1;
    }
}

relation ExtraCurricularActivityType {
    student.curriculum.ExtraCurricularActivity playsRole extraCurricularActivity {
        multiplicity *;
    }
    student.curriculum.ExtraCurricularActivityType playsRole type {
        multiplicity 1..1;
    }
}

relation DegreeOfficialPublication {
    Degree playsRole degree {
        multiplicity 1..1;
    }
    DegreeOfficialPublication playsRole officialPublication {
        multiplicity *;
    }
}

relation DegreeOfficialPublicationSpecializationAreas {
    DegreeOfficialPublication playsRole officialPublication {
        multiplicity 1..1;
    }
    DegreeSpecializationArea playsRole specializationArea {
        multiplicity *;
    }
}

relation EnrolmentEvaluationLogRootDomainObject {
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
	log.EnrolmentEvaluationLog playsRole enrolmentEvaluationLog {
		multiplicity *;
	}
}

relation RootDomainObjectEnrolmentInstructions {
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
	EnrolmentInstructions playsRole enrolmentInstructions {
		multiplicity *;
	}
}

relation ExecutionSemesterEnrolmentInstructions {
	ExecutionSemester playsRole executionSemester;
	EnrolmentInstructions playsRole enrolmentInstructions;
}


relation UniversityUnitPresident {
    .org.fenixedu.bennu.core.domain.User playsRole president;
    organizationalStructure.UniversityUnit playsRole universityUnitAsPresident {
        multiplicity *;
    }
}

relation UniversityUnitPrincipal {
    .org.fenixedu.bennu.core.domain.User playsRole principal;
    organizationalStructure.UniversityUnit playsRole universityUnitAsPrincipal {
        multiplicity *;
    }
}


relation RootDomainObjectEmailQueue {
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectFromEmailQueue;
	util.Email playsRole emailQueue {
		multiplicity *;
	}
}

relation RootDomainObjectCoordinatorLog {
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
	CoordinatorLog playsRole coordinatorLog {
		multiplicity *;
	}
}
relation CoordinatorLogExecutionDegree {
	ExecutionDegree playsRole executionDegree;
	CoordinatorLog playsRole coordinatorLog {
		multiplicity *;
	}		
}
relation CoordinatorLogWhoPerson {
	Person playsRole personWho;
	CoordinatorLog playsRole coordinatorLogWho {
		multiplicity *;
	}
}
relation CoordinatorLogPerson {
	Person playsRole person;
	CoordinatorLog playsRole coordinatorLog {
		multiplicity *;
	}
}

relation StudentCandidacyCandidacySummaryFile {
	candidacy.StudentCandidacy playsRole studentCandidacy;
	candidacy.CandidacySummaryFile playsRole summaryFile {
		multiplicity 0..1;
	}
}


relation IngressionTypeBennu{
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject {
        multiplicity 1..1;
    }
	candidacy.IngressionType playsRole ingressionTypes{
		multiplicity *;
	}
}

relation StudentCandidacyIngressionType{
	candidacy.StudentCandidacy playsRole studentCandidacy{
		multiplicity *;
	}
	
	candidacy.IngressionType playsRole ingressionType{
		multiplicity 0..1;
	}
}

relation RegistrationIngressionType{
	student.Registration playsRole registration{
		multiplicity *;
	}
	
	candidacy.IngressionType playsRole ingressionType{
		multiplicity 0..1;
	}
} 

relation StudentCandidacyFirstTimeCandidacyLog { 
	candidacy.StudentCandidacy playsRole studentCandidacy;
	log.FirstTimeCandidacyLog playsRole firstTimeCandidacyLog {
		multiplicity 0..1;
	}
}

relation FirstTimeCandidacyLogFirstTimeCandidacyLogEntry {
	log.FirstTimeCandidacyLog playsRole firstTimeCandidacyLog {
		multiplicity 0..1;
	}
	log.FirstTimeCandidacyLogEntry playsRole firstTimeCandidacyLogEntry {
		multiplicity *;
	}
}

relation ProfessorshipPremissionsProfessorship {
	Professorship playsRole professorship;
	ProfessorshipPermissions playsRole permissions;
}

relation PremissionsProfessorshipRootDomainObject {
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
	ProfessorshipPermissions playsRole professorshipPermissions {
		multiplicity *;
	}
}

relation ProfessorshipUser {
	Person playsRole creator;
	Professorship playsRole professorshipCreated{
		multiplicity *;
	}
}

relation BennuTeacherAuthorizations {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject {
        multiplicity 0..1;
    }
    public TeacherAuthorization playsRole teacherAuthorization {
        multiplicity *;
    }
}

relation BennuRevokedTeacherAuthorizations {
    .org.fenixedu.bennu.core.domain.Bennu playsRole revokedRootDomainObject {
        multiplicity 0..1;
    }
    public TeacherAuthorization playsRole revokedTeacherAuthorization {
        multiplicity *;
    }
}

relation TeacherTeacherAuthorization {
	Teacher playsRole teacher {
	    multiplicity 0..1;
	}
	TeacherAuthorization playsRole authorization {
    	multiplicity *;
	}
}

relation TeacherRevokedTeacherAuthorization {
    Teacher playsRole revokedTeacher {
        multiplicity 0..1;
    }
    TeacherAuthorization playsRole revokedAuthorization {
        multiplicity *;
    }
}

relation DepartmentTeacherAuthorizations {
    protected Department playsRole department {
        multiplicity 0..1;
    }
    protected TeacherAuthorization playsRole teacherAuthorization {
    	multiplicity *;
	}
}

relation DepartmentRevokedTeacherAuthorizations {
    protected Department playsRole revokedDepartment {
        multiplicity 0..1;
    }
    protected TeacherAuthorization playsRole revokedTeacherAuthorization {
        multiplicity *;
    }
}

relation ExecutionSemesterTeacherAuthorizations {
    public ExecutionSemester playsRole executionSemester {
        multiplicity 0..1;
    }
    public TeacherAuthorization playsRole teacherAuthorization {
        multiplicity *;
    }
}

relation ExecutionSemesterRevokedTeacherAuthorizations {
    protected ExecutionSemester playsRole revokedExecutionSemester {
        multiplicity 0..1;
    }
    protected TeacherAuthorization playsRole revokedTeacherAuthorization {
        multiplicity *;
    }
}

relation TeacherAuthorizationAuthorizer {
    protected .org.fenixedu.bennu.core.domain.User playsRole authorizer {
        multiplicity 0..1;
    }
    protected TeacherAuthorization playsRole teacherAuthorizationAuthorized {
        multiplicity *;
    }
}

relation TeacherAuthorizationRevokerer {
	protected .org.fenixedu.bennu.core.domain.User playsRole revoker {
        multiplicity 0..1;
	}
	protected TeacherAuthorization playsRole teacherAuthorizationRevoked {
    	multiplicity *;
	}
}

relation TeacherCategoryRoot {
    protected .org.fenixedu.bennu.core.domain.Bennu playsRole root {
        multiplicity 1..1;
    }
    public TeacherCategory playsRole teacherCategory {
        multiplicity *;
    }
}

relation TeacherAuthorizationTeacherCategory {
    protected TeacherCategory playsRole teacherCategory {
        multiplicity 1..1;
    }
    protected TeacherAuthorization playsRole authorization {
        multiplicity *;
    }
}

relation ExternalScholarshipProviderRootDomainObject {
	organizationalStructure.Party playsRole externalScholarshipProvider{
		multiplicity *;
	}
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObjectExternalScholarshipProvider;
}

relation PersonPersonIdentificationDocumentExtraInfo {
	Person playsRole person {
		multiplicity 1..1;
	}
	PersonIdentificationDocumentExtraInfo playsRole personIdentificationDocumentExtraInfo {
		multiplicity *;
	}
}

relation PersonIdentificationDocumentExtraInfoRootDomainObject {
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    PersonIdentificationDocumentExtraInfo playsRole personIdentificationDocumentExtraInfo {
        multiplicity *;
    }
}

/* RAIDES Domain */

relation RootDomainObjectDegreeDesignation {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    raides.DegreeDesignation playsRole degreeDesignations {
        multiplicity *;
    }
}

relation RootDomainObjectDegreeClassification {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    raides.DegreeClassification playsRole degreeClassifications {
        multiplicity *;
    }
}

relation DegreeDesignationDegreeClassification {
    raides.DegreeClassification playsRole degreeClassification;
    raides.DegreeDesignation playsRole degreeDesignations {
        multiplicity *;
    }
}

relation RootDomainObjectPersonalIngressionData {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject;
    student.PersonalIngressionData playsRole personalIngressionsData {
        multiplicity *;
    }
}

relation PersonalIngressionDataCountryOfResidence {   
    student.PersonalIngressionData playsRole personalIngressionsData {
        multiplicity *;
    } 
    Country playsRole countryOfResidence;
}

relation PersonalIngressionDataGrantOwnerProvider {
    student.PersonalIngressionData playsRole personalIngressionsData {
        multiplicity *;
    }
    organizationalStructure.Unit playsRole grantOwnerProvider;
}

relation PersonalIngressionDataDistrictSubdivisionOfResidence {
    student.PersonalIngressionData playsRole personalIngressionsData {
        multiplicity *;
    }
    DistrictSubdivision playsRole districtSubdivisionOfResidence;
}

relation PersonalIngressionDataSchoolTimeDistrictSubdivisionOfResidence {
    student.PersonalIngressionData playsRole schoolTimePersonalIngressionsData {
        multiplicity *;
    }
    DistrictSubdivision playsRole schoolTimeDistrictSubDivisionOfResidence;
}

relation PersonalIngressionDataPrecedentDegreeInformation {   
    student.PersonalIngressionData playsRole personalIngressionData;     
    student.PrecedentDegreeInformation playsRole precedentDegreesInformations {
        multiplicity *;
    }
}

relation PersonalIngressionDataExecutionYear {   
    student.PersonalIngressionData playsRole personalIngressionsData {
    	multiplicity *;
    }     
    ExecutionYear playsRole executionYear;
}

relation PrecedentDegreeInformationRegistration {      
    student.PrecedentDegreeInformation playsRole precedentDegreesInformations {
        multiplicity *;
    }
    student.Registration playsRole registration;
}

relation StudentPrecedentDegreeInformation {      
    student.PersonalIngressionData playsRole personalIngressionsData {
        multiplicity *;
    }
    student.Student playsRole student;
}

/* End of RAIDES Domain */

relation RootDomainObjectTeacherEvaluationCoordinatorCouncil {
    .org.fenixedu.bennu.core.domain.Bennu playsRole rootFromTeacherEvaluationCouncil;
  	.org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole teacherEvaluationCoordinatorCouncil;
}

relation FenixPredicateGroupBennu {
    public accessControl.FenixPredicateGroup playsRole fenixPredicateGroup {
        multiplicity *;
    }
    protected .org.fenixedu.bennu.core.domain.Bennu playsRole rootForFenixPredicate {
        multiplicity 0..1;
    }
}

relation PersistentStudentGroupCampus {
    public accessControl.PersistentStudentGroup playsRole studentGroup {
        multiplicity *;
    }
    public .org.fenixedu.spaces.domain.Space playsRole campus {
        multiplicity 0..1;
    }
}

relation PersistentStudentGroupDegree {
    public accessControl.PersistentStudentGroup playsRole studentGroup {
        multiplicity *;
    }
    public Degree playsRole degree {
        multiplicity 0..1;
    }
}

relation PersistentStudentGroupDegreeType {
    public accessControl.PersistentStudentGroup playsRole studentGroup {
        multiplicity *;
    }
    public degree.DegreeType playsRole degreeType {
        multiplicity 0..1;
    }
}

relation PersistentStudentGroupExecutionCourse {
    public accessControl.PersistentStudentGroup playsRole studentGroup {
        multiplicity *;
    }
    public ExecutionCourse playsRole executionCourse {
        multiplicity 0..1;
    }
}

relation PersistentStudentGroupCurricularYear {
    public accessControl.PersistentStudentGroup playsRole studentGroup {
        multiplicity *;
    }
    public CurricularYear playsRole curricularYear {
        multiplicity 0..1;
    }
}

relation PersistentStudentGroupExecutionYear {
    public accessControl.PersistentStudentGroup playsRole studentGroup {
        multiplicity *;
    }
    public ExecutionYear playsRole executionYear {
        multiplicity 0..1;
    }
}

relation PersistentSpecialCriteriaOverExecutionCourseGroupExecutionCourse {
    public accessControl.PersistentSpecialCriteriaOverExecutionCourseGroup playsRole specialCriteriaOverExecutionCourseGroup {
        multiplicity *;
    }
    public ExecutionCourse playsRole executionCourse {
        multiplicity 1..1;
    }
}

relation PersistentTeacherGroupDegree {
    public accessControl.PersistentTeacherGroup playsRole teacherGroup {
        multiplicity *;
    }
    public Degree playsRole degree {
        multiplicity 0..1;
    }
}

relation PersistentTeacherGroupExecutionCourse {
    public accessControl.PersistentTeacherGroup playsRole teacherGroup {
        multiplicity *;
    }
    public ExecutionCourse playsRole executionCourse {
        multiplicity 0..1;
    }
}

relation PersistentTeacherGroupCampus {
    public accessControl.PersistentTeacherGroup playsRole teacherGroup {
        multiplicity *;
    }
    public .org.fenixedu.spaces.domain.Space playsRole campus {
        multiplicity 0..1;
    }
}

relation PersistentTeacherGroupDepartment {
    public accessControl.PersistentTeacherGroup playsRole teacherGroup {
        multiplicity *;
    }
    public Department playsRole department {
        multiplicity 0..1;
    }
}

relation PersistentTeacherGroupExecutionYear {
    public accessControl.PersistentTeacherGroup playsRole teacherGroup {
        multiplicity *;
    }
    public ExecutionYear playsRole executionYear {
        multiplicity 0..1;
    }
}

relation PersistentCoordinatorGroupDegree {
    public accessControl.PersistentCoordinatorGroup playsRole coordinatorGroup {
        multiplicity *;
    }
    public Degree playsRole degree {
        multiplicity 0..1;
    }
}

relation PersistentCoordinatorGroupDegreeType {
    public accessControl.PersistentCoordinatorGroup playsRole coordinatorGroup {
        multiplicity *;
    }
    public degree.DegreeType playsRole degreeType {
        multiplicity 0..1;
    }
}


relation PersistentUnitGroupUnit {
    public accessControl.PersistentUnitGroup playsRole unitGroup {
        multiplicity *;
    }
    public organizationalStructure.Unit playsRole unit {
        multiplicity 1..1;
    }
}

relation PersistentStudentsConcludedInExecutionYearGroupDegrees {
    public accessControl.PersistentStudentsConcludedInExecutionYearGroup playsRole studentsConcludedInExecutionYearGroup {
        multiplicity *;
    }
    public Degree playsRole degree {
        multiplicity 1..1;
    }
}

relation PersistentStudentsConcludedInExecutionYearExecutionYear {
    public accessControl.PersistentStudentsConcludedInExecutionYearGroup playsRole studentsConcludedInExecutionYearGroup {
        multiplicity *;
    }
    public ExecutionYear playsRole conclusionYear {
        multiplicity 1..1;
    }
}

relation AcademicAuthorizationGroupAcademicPrograms {
    public accessControl.PersistentAcademicOperationGroup playsRole academicAuthorizationGroup {
        multiplicity *;
    }
    public AcademicProgram playsRole program {
        multiplicity *;
    }
}

relation AcademicAuthorizationGroupAdministrativeOffices {
    public accessControl.PersistentAcademicOperationGroup playsRole academicAuthorizationGroup {
        multiplicity *;
    }
    public administrativeOffice.AdministrativeOffice playsRole office {
        multiplicity *;
    }
}

relation PersistentAlumniGroupDegree {
	public accessControl.PersistentAlumniGroup playsRole alumniGroup {
		multiplicity 0..1;
	}
	public Degree playsRole degree {
		multiplicity 0..1;
	}
}

relation DegreeCurricularPlanMembers {
	protected DegreeCurricularPlan playsRole degreeCurricularPlanAsMembers {
		multiplicity *;
	}
	protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole membersGroup {
		multiplicity 0..1;
	}
}

relation DepartmentCompetenceCourseMembersGroup {
	protected Department playsRole departmentAsMembers {
		multiplicity *;
	}
	protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole membersGroup {
		multiplicity 1..1;
	}
}

relation RecipientMembers {
	public util.email.Recipient playsRole recipientAsMembers {
		multiplicity *;
	}
	protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole membersGroup {
		multiplicity 0..1;
	}
}

relation SenderMembers {
	protected util.email.Sender playsRole senderAsMembers {
		multiplicity *;
	}
	protected .org.fenixedu.bennu.core.domain.groups.PersistentGroup playsRole membersGroup {
		multiplicity 1..1;
	}
}

relation StudentRegistrationTransferLogSource {
    protected student.Student playsRole source {
        multiplicity 1..1;
    }
    public log.StudentRegistrationTransferLog playsRole transferLogAsSource {
        multiplicity *;
    }
}

relation StudentRegistrationTransferLogTarget {
    public log.StudentRegistrationTransferLog playsRole transferLogAsTarget {
        multiplicity *;
    }
    protected student.Student playsRole target {
        multiplicity 1..1;
    }
}

relation BennuFirstTimeDocumentsConfiguration {
	.org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject {
		multiplicity 1..1;
	}
	candidacy.FirstTimeDocumentsConfiguration playsRole firstTimeDocumentsConfiguration {
		multiplicity 0..1;
	}
}

/* ServiceRequestType */

relation ServiceRequestTypeBennu {
	protected .org.fenixedu.bennu.core.domain.Bennu playsRole rootDomainObject {
		multiplicity 1..1;
	}

	public serviceRequests.ServiceRequestType playsRole serviceRequestTypes {
		multiplicity *;
	}
}

relation ServiceRequestTypeAcademicServiceRequest {
	public serviceRequests.ServiceRequestType playsRole serviceRequestType {
		multiplicity 0..1;
	}

	public serviceRequests.AcademicServiceRequest playsRole academicServiceRequests {
		multiplicity *;
	}
}

/* DocumentPurposeTypeInstance */

relation DocumentPurposeTypeInstanceBennu {
	protected .org.fenixedu.bennu.core.domain.Bennu playsRole bennu {
		multiplicity 1..1;
	}

	public serviceRequests.documentRequests.DocumentPurposeTypeInstance playsRole documentPurposeTypeInstances {
		multiplicity *;
	}
}

relation DocumentPurposeTypeInstanceServiceRequestType {
	public serviceRequests.documentRequests.DocumentPurposeTypeInstance playsRole documentPurposeTypeInstances {
		multiplicity *;
	}
	
	public serviceRequests.ServiceRequestType playsRole serviceRequestTypes {
		multiplicity *;
	}
}


relation CurricularRuleCurricularPeriod {
	curricularRules.CurricularRule playsRole curricularRules {
		multiplicity *;
	}
	
	curricularPeriod.CurricularPeriod playsRole curricularPeriod {
		multiplicity 0..1;
	}
}
